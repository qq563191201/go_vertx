package com.google.code.proto.gcless;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.junit.experimental.theories.Theories;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;




public class MemlessGenerator {

	private static final String HEADER = "// Generated by the protocol buffer gcless compiler.  DO NOT EDIT!\n";

	public static Element readfile(String filePath) {  
        try {  
            SAXReader reader = new SAXReader();  
            Document doc = reader.read(filePath);  
            Element root = doc.getRootElement();  
            readNode(root, "");  
            return root;
        } catch (DocumentException e) {  
            e.printStackTrace();
            
        }  
        return null;
    }  
      
    @SuppressWarnings("unchecked")  
    public static void readNode(Element root, String prefix) {  
        if (root == null) return;  
        // 获取属性  
        List<Attribute> attrs = root.attributes();  
        if (attrs != null && attrs.size() > 0) {  
            System.err.print(prefix);  
            for (Attribute attr : attrs) {  
                System.err.print(attr.getValue() + " ");  
            }  
            System.err.println();  
        }  
        // 获取他的子节点  
        List<Element> childNodes = root.elements();  
        prefix += "\t";  
        for (Element e : childNodes) {  
            readNode(e, prefix);  
        }  
    }
    static File BeanControllerDir; 
    static File BeanDir; 
    static File BeanDirTest; 
    static File BeanControllerDirTest; 
    static File VertxHanlderJSONDir;
    static File VertxHanlderMsgPackDir;
    static File VertxBeanDir;
    static File ProrjectDir;
    static File BeanXMLSPRING;
    static File InterfacesDir;
    static File BeanLogicDIr;
    static File LogicsInterXML;
    
    
    static File StaticTestLogicWeb;
    
    static File LuaHttpScripts=null;
    static StringBuilder BeanSpringGo=new StringBuilder();
    static StringBuilder goBuilderXML=new StringBuilder();
    static StringBuilder LogicBeanXML;
    static com.alibaba.fastjson.JSONArray JSONArrayProto=new com.alibaba.fastjson.JSONArray();
    static String LanguagePrG=new String();
    
    static String GOLangHttpLoigicName="";
    static String GolangHttpHandlerName="";
    static String GolangTCPLogicName="";
    static String GolangTCPHandlerName="";
    //golang目录
    static String GolangDIr="";
    //go工程名字
    static String GoPackage="";
    //go protobuf dir
    static String GoProtobuf="";
    static File GoHttpLogicFile;
    static File GoHttpHandlerFile;
    static File GoTcpHandlerFile;
    static File GoTcpLogicFile;
    static String HttpHandlerAll="";
    static String TcptpHandlerAll="";
    static File GoMainFile;
    static String importHttpHanlder="";
    static String GolangDirPackage="";
	public static void main(String[] args) throws Exception {
		String testConfig="E:\\workmj\\com.gojava\\Tools\\AutoConfig.xml";
		
		
		/*if (args.length < 2) {
			System.out.println("invalid usage. Expected: <output-path> <proto-files>");
			return;
		}
*/
		//goBuilderXML;
		//如果用的是配置表则走这个流程
	
		if(true){
			Element root=readfile(testConfig);
			//protobuf所在的文件夹
			String protobufDir=root.element("ProtoBufDir").getText();
			//protobuf生成的文件夹
			String protobufOut=root.element("ProtoOutPut").getText();
			//ProtoBeanOut Protobuf处理Bean的文件夹
			String protobufBean=root.element("ProtoBeanOut").getText(); 
			//ProtoBeanOut Protobuf处理Bean的文件夹
			String protobufBeanController=root.element("ProtoBeanController").getText(); 
			//ProtoBeanControllerTest 控制器的测试生成目录
			String protobufBeanControllerTest=root.element("ProtoBeanControllerTest").getText(); 
			String TestLogicWebStr=root.element("JavaGen").getText();
			String VertxHandlerDirStr=root.element("VertxBeanHandler").getText(); 
			String VertBeanDirStr=root.element("VertxBean").getText(); 
			String VertMsgPackHandler=root.element("VertxMsgPack").getText();
			File output = new File(protobufOut);
			//ProtoBeanTest Bean的测试目录
			String protobufBeantest=root.element("ProtoBeanTest").getText(); 
			File output1 = new File(protobufDir);
			BeanControllerDir=new File(protobufBeanController);
			BeanDir=new File(protobufBean);
			BeanDirTest=new File(protobufBeantest);
			BeanControllerDirTest=new File(protobufBeanControllerTest);
			VertxHanlderJSONDir=new File(VertxHandlerDirStr);
			VertxBeanDir=new File(VertBeanDirStr);
			VertxHanlderMsgPackDir=new File(VertMsgPackHandler);
			ProrjectDir=new File(root.element("ProjectDir").getText());
			//----bean自动注册文件
			BeanXMLSPRING=new File(root.element("SpringBean").getText());
			//---协议handler注册json
			InterfacesDir=new File(root.element("Interface").getText());
			//逻辑代码末班
			BeanLogicDIr=new File(root.element("BeanLogic").getText());
			//-----逻辑接口的注册
			LogicsInterXML=new File(root.element("LogicXML").getText());
			GolangDirPackage = root.element("GolangDir").getText();
			GoPackage=root.element("Package").getText();
			GoProtobuf=root.element("ProtobufGo").getText();
			GolangDIr=root.element("GoDir").getText();
			GOLangHttpLoigicName=root.element("GoHttpLogic").getText();
			GolangHttpHandlerName=root.element("GoHttpHandler").getText();
			GolangTCPLogicName=root.element("GoTcpLogic").getText();
			GolangTCPHandlerName=root.element("GoTcpHandler").getText();
			String luaScriptStr=root.element("LuaScript").getText();
			GoHttpLogicFile=new File(GolangDIr+"/"+GoPackage+"/http/"+GOLangHttpLoigicName);
			if (!GoHttpLogicFile.exists()) {
				GoHttpLogicFile.mkdirs();
			}
			GoHttpHandlerFile=new File(GolangDIr+"/"+GoPackage+"/http");
			
			if (!GoHttpLogicFile.exists()){
				GoHttpLogicFile.mkdirs();
			}
			
			
			GoTcpLogicFile=new File(GolangDIr+"/"+GoPackage+"/tcp/"+GolangTCPLogicName);
			GoTcpHandlerFile=new File(GolangDIr+"/"+GoPackage+"/tcp/"+GolangTCPHandlerName);
			GoMainFile=new File(GolangDIr+"/"+GoPackage);
			LanguagePrG=root.element("Language").getText();
			if(luaScriptStr!=null && !luaScriptStr.isEmpty()){
				LuaHttpScripts = new File(luaScriptStr);
			}
			//web测试页面代码
			StaticTestLogicWeb= new File(TestLogicWebStr); 
			
			goBuilderXML.append("[\n");
			BeanSpringGo.append("<beans xmlns=\"http://www.springframework.org/schema/beans\"\n");
			BeanSpringGo.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n");
			BeanSpringGo.append("xmlns:context=\"http://www.springframework.org/schema/context\"\n");
			BeanSpringGo.append("xmlns:p=\"http://www.springframework.org/schema/p\"\n");
			BeanSpringGo.append("xmlns:tx=\"http://www.springframework.org/schema/tx\"\n");
			BeanSpringGo.append("xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n");
			BeanSpringGo.append("http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n");
			BeanSpringGo.append("http://www.springframework.org/schema/context\n");
			BeanSpringGo.append("http://www.springframework.org/schema/context/spring-context-3.0.xsd\n");
			BeanSpringGo.append("http://www.springframework.org/schema/aop\n");
			BeanSpringGo.append("http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n");
			BeanSpringGo.append("http://www.springframework.org/schema/tx\n");
			BeanSpringGo.append("http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\n");
			BeanSpringGo.append("http://www.springframework.org/schema/mvc\n");
			BeanSpringGo.append("http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\n");
			BeanSpringGo.append("http://www.springframework.org/schema/context\n");
			BeanSpringGo.append("http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n");            
			LogicBeanXML=new StringBuilder(BeanSpringGo.toString());
			HttpHandlerAll+="package "+GoPackage+"\n ";
			HttpHandlerAll+="import \""+GolangDirPackage+"/"+GoPackage+"/http\"\n";
			HttpHandlerAll+="import \"github.com/kataras/iris\"\n";
			HttpHandlerAll+="func InitHandler(api *iris.Application){\n";
			TcptpHandlerAll+="package "+GoPackage;
			if(output1.isDirectory()){
			File[] fs=output1.listFiles();
				for(int j=0;j<fs.length;j++){
					if(fs[j].getName().endsWith("proto")){
						com.alibaba.fastjson.JSONObject obj=new com.alibaba.fastjson.JSONObject();
						if(LanguagePrG.equals("Java")){
							process2(output,fs[j].getPath(),fs[j].getName(),obj);
						}else if(LanguagePrG.equals("GoLang")){
							process2go(output,fs[j].getPath(),fs[j].getName(),obj);
						}
						JSONArrayProto.add(obj);
					}
				}
				WriteFileBufferExt(StaticTestLogicWeb,"/data/menu",JSONArrayProto.toJSONString(),".json");
			}else{
				System.out.println("<protobuf-path> " +protobufDir+ " is not Directory");
				return;
			}
			
			String newgo=goBuilderXML.toString().substring(0,goBuilderXML.toString().length()-2);
			//goBuilderXML.append("]\n");
			BeanSpringGo.append("</beans>");
			LogicBeanXML.append("</beans>");
			TcptpHandlerAll+="}\n";
			HttpHandlerAll+="}\n";
			WriteFileBufferExt(GoMainFile,"HttpHandler",HttpHandlerAll.toString(),".go"); 
			//WriteFileBufferExt(GoMainFile,"TcpHandler",TcptpHandlerAll.toString(),".go"); 
			if (LanguagePrG.equals("Java")){
				WriteFileBufferExt(BeanXMLSPRING,"autobean",BeanSpringGo.toString(),".xml"); 
				WriteFileBufferExt(ProrjectDir,"bean_logic",LogicBeanXML.toString(),".xml");
				WriteFileBufferJson(ProrjectDir,"interface",newgo+"\n]");
			}
			
		
		 
		}else if(args[0].equals("luacfg")){
			
		}else{
		
				File output = new File(args[0]);
				if (!output.exists()) {
					System.out.println("<output-path> " + output.getAbsolutePath() + " doesnt exist");
					return;
				}
				if (!output.isDirectory()) {
					System.out.println("<output-path> " + output.getAbsolutePath() + " is not a directory");
					return;
				}
		
				for (int i = 1; i < args.length; i++) {
					try {
						process(output, args[i]);
					} catch (Exception e) {
						System.out.println("unable to process: " + args[i]);
						e.printStackTrace();
					}
				}
		}
	}
	private static void process(File output, String filename) throws Exception {
		MemlessParser parser = new MemlessParser();
		parser.process(filename);
		process(output, parser);
		for (MemlessParser cur : parser.getImportedParsers()) {
			process(output, cur);
		}
	}
	///-------------------新的协议
	private static void process2(File output, String filename,String name,JSONObject obj) throws Exception {
		MemlessParser parser = new MemlessParser();
		parser.process(filename);
		process(output, parser,parser.getProtoBufName(),obj);
		obj.put("Name", parser.getProtoBufName());
		
		for (MemlessParser cur : parser.getImportedParsers()) {
			//cur.getOuterClassName()
			process(output, cur,cur.getProtoBufName(),obj);
		}
	}
	private static void process2go(File output, String filename,String name,JSONObject obj) throws Exception {
		MemlessParser parser = new MemlessParser();
		parser.process(filename);
		processgo(output, parser,parser.getProtoBufName(),obj);
		obj.put("Name", parser.getProtoBufName());
		//importHttpHanlder+="'"+GoPackage+"/http'";
		HttpHandlerAll+="http.InitHandlerHttp"+parser.getProtoBufName().toLowerCase()+"(api)\n";
		for (MemlessParser cur : parser.getImportedParsers()) {
			//cur.getOuterClassName()
			processgo(output, cur,cur.getProtoBufName(),obj);
		}
	}
	private static void processgo(File output, MemlessParser parser,String ProtobufName,JSONObject jsonObj) throws IOException, Exception {
		String packageName = parser.getPackageName();
		if (packageName != null) {
			output = createPackage(output, packageName);
		}

		BufferedWriter w = null;
		if (parser.getOuterClassName() != null) {
			w = new BufferedWriter(new FileWriter(new File(output, parser.getOuterClassName() + ".java")));
			w.append(HEADER);
			appendPackage(w, parser.getPackageName());
			w.append("public final class ");
			w.append(parser.getOuterClassName());
			w.append(" {\nprivate ");
			w.append(parser.getOuterClassName());
			w.append("() {}\n");
		}

		for (ProtobufEnum curEnum : parser.getEnums()) {
			String curEnumData = generateEnum(curEnum);
			if (parser.getOuterClassName() != null && w != null) {
				w.append(curEnumData);
			} else {
				BufferedWriter enumWriter = new BufferedWriter(new FileWriter(new File(output, curEnum.getName() + ".java")));
				appendPackage(enumWriter, parser.getPackageName());
				enumWriter.append(curEnumData);
				enumWriter.flush();
				enumWriter.close();
			}
		} 
		GeneratorConfiguration config = new GeneratorConfiguration(System.getProperties());
		//解析出来所有的Message 
		StringBuilder beanController=new StringBuilder();
		StringBuilder beanPostController=new StringBuilder();
		StringBuilder beanGetController=new StringBuilder();
		StringBuilder LogiceTmpCode=new StringBuilder();
		StringBuilder LuaHttpHelper=new StringBuilder();
		LuaHttpHelper.append("local ApiURL = sprint.config(\"apiurl2\") \n");
		String functionTmplua=""
				+ "local HttpHelper.post_%s_%s(params,fn)\n"
				+ "			sprint.httpPost(ApiURL..\"/%s\"..\"/%s\", params, fn)\n"
				+ "end\n";
		String params="";
		String GetTemp="api.Get(\"/api/%s/%s\",sysutils.SafeAccess, func(ctx context.Context) {\n"+
						"%s\n"+
		 "})\n";
		String PostTemp="api.Post(\"/api/%s/%s\",sysutils.SafeAccess, func(ctx context.Context) {\n"+
					"%s\n"+
			 "})\n";
		//handler处理
		String TcpTemp=" TcpHander[%s]=%s \n ";
		LogiceTmpCode.append("package "+GolangHttpHandlerName+" \n");
		LogiceTmpCode.append("import (\n"+
			 "	\"github.com/kataras/iris\"\n \"github.com/kataras/iris/context\" \n"+
			"	\""+GolangDirPackage+"/"+ GoPackage+"/http/"+GOLangHttpLoigicName+"/"+ProtobufName.toLowerCase()+"\"\n"+
			 "	\""+GolangDirPackage+"/sysutils\"\n"+
		")\n");
		LogiceTmpCode.append("func InitHandlerHttp"+ProtobufName.toLowerCase()+"(api *iris.Application){ \n");	
		
		StringBuilder TcpLogicCode=new StringBuilder();
		TcpLogicCode.append("package "+GolangHttpHandlerName+" \n");
		TcpLogicCode.append("import (\n"+
			 "	\"github.com/kataras/iris\"\n"+
			 "	\""+ GoPackage+"/tcp/"+ProtobufName.toLowerCase()+"\"\n"+
			 "	\""+GolangDirPackage+"/sysutils\"\n"+
		")\n");
		TcpLogicCode.append("func Init_Handler_Tcp_"+ProtobufName.toLowerCase()+"(){ \n");
		StringBuilder beanVertx=new StringBuilder(); 
		StringBuilder vertxController=new StringBuilder();
	
	    StringBuilder BeanControllers=new StringBuilder();
	    StringBuilder LuaTmps=new StringBuilder();
	    LuaTmps.append("local HttpHelper={}\n");
	    LuaTmps.append("local ApiURL=sprint.config(\"serverURL2\")\n");
	    
	    JSONArray ListMsgObj=new JSONArray();
	    jsonObj.put("List", ListMsgObj);	   
		for (ProtobufMessage curMessage : parser.getMessages()) {
			
			
			
			String MessageLogic=new String();
			if (curMessage.getHttpMethod()!=null){
				
				String method=curMessage.getHttpMethod();
			//	String One="";
			//	One=One.toUpperCase()+curMessage.getFullyClarifiedJavaName().toLowerCase().substring(1, curMessage.getFullyClarifiedJavaName().toLowerCase().length());
				String CallMethod=ProtobufName.toLowerCase().toLowerCase()+"."+curMessage.getName()+"(ctx)\n";
				if(method.toLowerCase().equals("get")){
					LogiceTmpCode.append(String.format(GetTemp,ProtobufName.toLowerCase().toLowerCase(),curMessage.getName().toLowerCase(),CallMethod));
				}else if(method.toLowerCase().equals("post")){
					LogiceTmpCode.append(String.format(PostTemp,ProtobufName.toLowerCase().toLowerCase(),curMessage.getName().toLowerCase(),CallMethod));				
				}else if(method.toLowerCase().equals("tcp")){
					TcpLogicCode.append(String.format(TcpTemp,curMessage.getProtoNumber(),ProtobufName.toLowerCase().toLowerCase()+"."+curMessage.getFullyClarifiedJavaName()+""));
					
				}		
			
			if(curMessage.getRecvMsgName()!=null){
				JSONObject msgObj=new JSONObject();
				ListMsgObj.add(msgObj);
				msgObj.put("Name",curMessage.getName().toLowerCase());
				JSONArray listfileds=new JSONArray();
				msgObj.put("List", listfileds);
				StringBuilder filedverfiy=new StringBuilder();  
				for(ProtobufField curfield:curMessage.getFields()){
					JSONObject FiledObj=new JSONObject();
					FiledObj.put("Name", curfield.getName());
					FiledObj.put("Type", curfield.getFullyClarifiedJavaType());
					listfileds.add(FiledObj);
					
					if(curfield.getType().contains("int32")){
						if(curfield.getMaxval().equals("none")&&curfield.getMinval().equals("none")){
						}else{
						int maxv=curfield.getMaxval().equals("none")?Integer.MAX_VALUE:Integer.parseInt(curfield.getMaxval());
						int minv=curfield.getMinval().equals("none")?Integer.MIN_VALUE:Integer.parseInt(curfield.getMinval());
						filedverfiy.append("val=val&&VarVerfiyValue.Clamp(o.get").append(BeOne(curfield.getName())+"()"); 
						filedverfiy.append(",").append(maxv).append(",").append(minv).append(");");
						}
					}else if(curfield.getType().contains("int64")){
						if(curfield.getMaxval().equals("none")&&curfield.getMinval().equals("none")){
							
						}else{
						long maxv=curfield.getMaxval().equals("none")?Long.MAX_VALUE:Long.parseLong(curfield.getMaxval());
						long minv=curfield.getMinval().equals("none")?Long.MIN_VALUE:Long.parseLong(curfield.getMinval());
						filedverfiy.append("val=val&&VarVerfiyValue.Clamp(o.get").append(BeOne(curfield.getName())+"()"); 
						filedverfiy.append(",").append(maxv).append(",").append(minv).append(");");
						
						}
					}else if(curfield.getType().contains("double")){
						if(curfield.getMaxval().equals("none")&&curfield.getMinval().equals("none")){
							
						}else{
							double maxv=curfield.getMaxval().equals("none")?Double.MAX_VALUE:Double.parseDouble(curfield.getMaxval());
							double minv=curfield.getMinval().equals("none")?Double.MIN_VALUE:Double.parseDouble(curfield.getMinval());
						filedverfiy.append("val=val&&VarVerfiyValue.Clamp(o.get").append(BeOne(curfield.getName())+"()"); 
						filedverfiy.append(",").append(maxv).append(",").append(minv).append(");");
						}
					}else if(curfield.getType().contains("float")){
						if(curfield.getMaxval().equals("none")&&curfield.getMinval().equals("none")){
							
						}else{
							float maxv=curfield.getMaxval().equals("none")?Float.MAX_VALUE:Float.parseFloat(curfield.getMaxval());
							float minv=curfield.getMinval().equals("none")?Float.MIN_VALUE:Float.parseFloat(curfield.getMinval());
							filedverfiy.append("val=val&&VarVerfiyValue.Clamp(o.get").append(BeOne(curfield.getName())+"()"); 
							filedverfiy.append(",").append(maxv).append(",").append(minv).append(");");
						}
					}else if(curfield.getType().contains("string")){
						int maxlen=curfield.getMaxlen().equals("none")?Integer.MAX_VALUE:Integer.parseInt(curfield.getMaxval());
						int minlen=curfield.getMinlen().equals("none")?Integer.MIN_VALUE:Integer.parseInt(curfield.getMinval());
						filedverfiy.append("val=val&&VarVerfiyValue.StringRegx(o.get").append(BeOne(curfield.getName())+"()"); 
						filedverfiy.append(",").append(maxlen).append(",").append(minlen).append(",\"").append(curfield.getStrregx()).append("\");");
					}
				}
				if (method.toLowerCase().equals("get")||method.toLowerCase().equals("post")){
						MessageLogic+="package "+ProtobufName.toLowerCase()+" \n";
						String importsys="	\"pokerhall/sysutils\"\n";
								if( method.toLowerCase().equals("post")) {
									msgObj.put("method", "post");
									importsys="";
								}else{
									msgObj.put("method", "get");
								}
								String filename =curMessage.getFullyClarifiedJavaName().toLowerCase();
								int lstindex = filename.lastIndexOf(".");
								filename = filename.substring(lstindex+1, filename.length());
						MessageLogic+="import (\n"+
								"	\"github.com/kataras/iris/context\" \n"+
								importsys+
								 "	\""+GolangDirPackage+"/"+GoPackage+"/"+GoProtobuf.toLowerCase()+"\"\n"
								+"\n)\n";
						String readdata = "sysutils.GetParams(Model, ctx)\n";
								if( method.toLowerCase().equals("post")) {
									readdata="ctx.ReadJSON(Model)\n";
								}
						MessageLogic+="func "+curMessage.getName()+"(ctx context.Context){\n "
								+"Model := &"+curMessage.getFullyClarifiedJavaName()+"{}\n "
								+readdata+
								"ret:=&"+GoProtobuf.toLowerCase()+"."+curMessage.getRecvMsgName()+"{}\n "
								+ "sysutils.ResponeResult(ctx,ret)\n}";
						File pathgo =new File(GoHttpLogicFile.getPath()+"/"+ProtobufName.toLowerCase());
						if (!pathgo.exists()){
							pathgo.mkdirs();
						}
						
						File IsFileExits=new File(GoHttpLogicFile.getPath()+"/"+ProtobufName.toLowerCase()+"/"+curMessage.getName().toLowerCase()+".go");
						if(!IsFileExits.exists()){
							WriteFileBufferExt(GoHttpLogicFile,"/"+ProtobufName.toLowerCase()+"/"+curMessage.getName().toLowerCase(),MessageLogic,".go");
						}
				}else{
					MessageLogic+="package "+curMessage.getFullyClarifiedJavaName().toLowerCase()+" \n";
					MessageLogic+="import (\n"+
							"`github.com/kataras/iris\"\n"+
							"`github.com/gansidui/gotcp`\n"+
							"`github.com/golang/protobuf/proto`"+
							"\""+GoPackage+"/sysutils\"\n"+
							 "\""+GoPackage+"/"+GoProtobuf.toLowerCase()+"\"\n"
							+"\n)";
					MessageLogic+="func "+curMessage.getFullyClarifiedJavaName()+"(Msg []byte,c *gotcp.Conn){\n "
							+" Model := &"+GoProtobuf.toLowerCase()+"."+curMessage.getFullyClarifiedJavaName()+"{}\n "
							+"// 返回 &"+curMessage.getRecvPackage()+"."+curMessage.getRecvMsgName()+"{}\n "
							+ "\n}";
					File IsFileExits=new File(GoTcpLogicFile.getPath()+"/"+ProtobufName.toLowerCase()+"/"+curMessage.getFullyClarifiedJavaName().toLowerCase()+".go");
					if(!IsFileExits.exists()){
						WriteFileBufferExt(GoTcpLogicFile,"/"+ProtobufName.toLowerCase()+"/"+curMessage.getFullyClarifiedJavaName().toLowerCase(),MessageLogic,".go");
					}
				}
				}
			}		
		}
		LogiceTmpCode.append("\n}\n");
		TcpLogicCode.append("\n}\n");//GoTcpHandlerFile
	//	WriteFileBufferExt(GoTcpHandlerFile,"/"+ProtobufName.toLowerCase(),TcpLogicCode.toString(),".go");
		WriteFileBufferExt(GoHttpHandlerFile,"/"+ProtobufName.toLowerCase(),LogiceTmpCode.toString(),".go");
		
	}
	private static void WriteFileBuffer(File parent,String extName,String buffer){
		try {
			BufferedWriter enumWriter = new BufferedWriter(new FileWriter(new File(parent,extName + ".java")));
			enumWriter.append(buffer);
			enumWriter.flush();
			enumWriter.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	private static void WriteFileBufferExt(File parent,String extName,String buffer,String ext){
		try {
			BufferedWriter enumWriter = new BufferedWriter(new FileWriter(new File(parent,extName + ext)));
			enumWriter.append(buffer);
			enumWriter.flush();
			enumWriter.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	private static void WriteFileBufferJson(File parent,String extName,String buffer){
		try {
			BufferedWriter enumWriter = new BufferedWriter(new FileWriter(new File(parent,extName + ".json")));
			enumWriter.append(buffer);
			enumWriter.flush();
			enumWriter.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	private static String BeOne(String str){
		char b=str.charAt(0);
	  String NewStr=str.substring(1,str.length());
	  String A=new String(new char[]{b});
	 return A.toUpperCase()+NewStr;
		
	}
	private static void process(File output, MemlessParser parser,String ProtobufName,JSONObject jsonObj) throws IOException, Exception {
		String packageName = parser.getPackageName();
		if (packageName != null) {
			output = createPackage(output, packageName);
		}

		BufferedWriter w = null;
		if (parser.getOuterClassName() != null) {
			w = new BufferedWriter(new FileWriter(new File(output, parser.getOuterClassName() + ".java")));
			w.append(HEADER);
			appendPackage(w, parser.getPackageName());
			w.append("public final class ");
			w.append(parser.getOuterClassName());
			w.append(" {\nprivate ");
			w.append(parser.getOuterClassName());
			w.append("() {}\n");
		}

		for (ProtobufEnum curEnum : parser.getEnums()) {
			String curEnumData = generateEnum(curEnum);
			if (parser.getOuterClassName() != null && w != null) {
				w.append(curEnumData);
			} else {
				BufferedWriter enumWriter = new BufferedWriter(new FileWriter(new File(output, curEnum.getName() + ".java")));
				appendPackage(enumWriter, parser.getPackageName());
				enumWriter.append(curEnumData);
				enumWriter.flush();
				enumWriter.close();
			}
		} 
		GeneratorConfiguration config = new GeneratorConfiguration(System.getProperties());
		//解析出来所有的Message 
		StringBuilder beanController=new StringBuilder();
		StringBuilder beanPostController=new StringBuilder();
		StringBuilder beanGetController=new StringBuilder();
		StringBuilder LogiceTmpCode=new StringBuilder();
		StringBuilder LuaHttpHelper=new StringBuilder();
		LuaHttpHelper.append("local ApiURL = sprint.config(\"apiurl2\") \n");
		String functionTmplua=""
				+ "local HttpHelper.post_%s_%s(params,fn)\n"
				+ "			sprint.httpPost(ApiURL..\"/%s\"..\"/%s\", params, fn)\n"
				+ "end\n";
		String params="";
		
		LogiceTmpCode.append("package com.gojava.vertx.bean.logics;\n");
		LogiceTmpCode.append("import %s;\n");
		LogiceTmpCode.append("import %s;\n");
		LogiceTmpCode.append("import com.gojava.vertx.bean.interfaces.LogicsInterfaces;\n");
		LogiceTmpCode.append("import io.vertx.ext.web.RoutingContext;\n");
		LogiceTmpCode.append("public class Bean_Logic_"+ProtobufName+"_%s extends BaseLogics implements LogicsInterfaces<%s,%s>{\n");

		LogiceTmpCode.append("@Override\n");
		LogiceTmpCode.append("public %s DoBean(%s v, RoutingContext ctx) {\n");
		LogiceTmpCode.append("return null;\n");
		LogiceTmpCode.append("}\n");
		LogiceTmpCode.append("}\n");		
		
	
		StringBuilder beanVertx=new StringBuilder(); 
		StringBuilder vertxController=new StringBuilder();
		//-------------------JSON----------
		vertxController.append("package com.gojava.vertx.handler; \n");
		vertxController.append("import org.apache.log4j.Logger;\n").append("import org.springframework.beans.BeansException;\n");
		vertxController.append("import org.springframework.context.ApplicationContext;\n");
		vertxController.append("import org.springframework.context.ApplicationContextAware;\n");
		vertxController.append("import org.springframework.context.annotation.Bean;\n");
		vertxController.append("import org.springframework.context.annotation.Scope;\n");
		vertxController.append("import org.springframework.stereotype.Component;\n");
		vertxController.append("import com.gojava.com.gojava.App;\n import io.vertx.core.AbstractVerticle;\n");
		vertxController.append("import io.vertx.core.Handler;\nimport io.vertx.core.http.HttpServer;\nimport io.vertx.core.http.HttpServerOptions;\n");
		vertxController.append("import io.vertx.ext.web.Router;\nimport io.vertx.ext.web.RoutingContext;\nimport io.vertx.ext.web.Session;\n");
		vertxController.append("import io.vertx.ext.web.handler.BodyHandler;\n");
		vertxController.append("import io.vertx.ext.web.handler.CookieHandler;\n");
		vertxController.append("import io.vertx.ext.web.handler.SessionHandler;\n");
		vertxController.append("import io.vertx.ext.web.sstore.ClusteredSessionStore;\n");
		vertxController.append("import io.vertx.ext.web.sstore.LocalSessionStore;\n").append("import io.vertx.ext.web.sstore.SessionStore;\n");
		vertxController.append("import com.alibaba.fastjson.JSON;\nimport com.gojava.com.gojava.App;\nimport com.gojava.interfaces.MsgInterfaceVertx;\nimport com.gojava.utils.GoUtils;\nimport com.gojava.vertx.beans.Bean_Vertx_"+ProtobufName+"_%s;\n");
		vertxController.append("import %s;\n");
		vertxController.append("import %s;\n");
		vertxController.append("\npublic class vertx_"+ProtobufName+"_%s_Json_Handler implements Handler<RoutingContext>,ApplicationContextAware{ \n");
		vertxController.append("ApplicationContext appctx;\n");
		vertxController.append("Logger loger=Logger.getLogger(App.class);\n");		
		vertxController.append("@Override\n");		
		vertxController.append("public void handle(RoutingContext ctx) {\n");	
		vertxController.append("try {\n");
		vertxController.append("String json=GoUtils.ToJsonStr(ctx.getBodyAsString());\n");	
		vertxController.append("%s message=JSON.parseObject(json,%s.class);\n");						
		vertxController.append("MsgInterfaceVertx<%s,%s> bean=(MsgInterfaceVertx<%s,%s>)appctx.getBean(Bean_Vertx_"+ProtobufName+"_%s.class);\n");
		vertxController.append("String endstr;\n");
		vertxController.append("endstr = JSON.toJSONString(bean.ProcessMsgInfo(message,ctx));\n");
		vertxController.append("ctx.response().end(endstr);\n");
		vertxController.append("} catch (Exception e) {\n");
		vertxController.append("e.printStackTrace();\n");
		vertxController.append("ctx.response().end(\"{err:500}\");}\n}\n");
		vertxController.append("@Override\n");
		vertxController.append("public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n");
		vertxController.append("appctx=applicationContext;\n }\n }\n");
		
		//----------------------Protobuf协议支持---------------
		StringBuilder vertxController_protobuf=new StringBuilder();
		vertxController_protobuf.append("package com.gojava.vertx.handler; \n");
		vertxController_protobuf.append("import org.apache.log4j.Logger;\n").append("import org.springframework.beans.BeansException;\n");
		vertxController_protobuf.append("import org.springframework.context.ApplicationContext;\n");
		vertxController_protobuf.append("import org.springframework.context.ApplicationContextAware;\n");
		vertxController_protobuf.append("import org.springframework.context.annotation.Bean;\n");
		vertxController_protobuf.append("import org.springframework.context.annotation.Scope;\n");
		vertxController_protobuf.append("import org.springframework.stereotype.Component;\n");
		vertxController_protobuf.append("import com.gojava.com.gojava.App;\n import io.vertx.core.AbstractVerticle;\n");
		vertxController_protobuf.append("import io.vertx.core.Handler;\nimport io.vertx.core.http.HttpServer;\nimport io.vertx.core.http.HttpServerOptions;\n");
		vertxController_protobuf.append("import io.vertx.ext.web.Router;\nimport io.vertx.ext.web.RoutingContext;\nimport io.vertx.ext.web.Session;\n");
		vertxController_protobuf.append("import io.vertx.ext.web.handler.BodyHandler;\n");
		vertxController_protobuf.append("import io.vertx.ext.web.handler.CookieHandler;\n");
		vertxController_protobuf.append("import io.vertx.ext.web.handler.SessionHandler;\n");
		vertxController_protobuf.append("import io.vertx.ext.web.sstore.ClusteredSessionStore;\n");
		vertxController_protobuf.append("import io.vertx.ext.web.sstore.LocalSessionStore;\n").append("import io.vertx.ext.web.sstore.SessionStore;\n");
		vertxController_protobuf.append("public class vertx_"+ProtobufName+"_%s_Protobuf_Handler implements Handler<RoutingContext>,ApplicationContextAware{ \n");
		vertxController_protobuf.append("ApplicationContext appctx;\n");
		vertxController_protobuf.append("Logger loger=Logger.getLogger(App.class);\n");		
		vertxController_protobuf.append("@Override\n");		
		vertxController_protobuf.append("public void handle(RoutingContext ctx) {\n");							
		vertxController_protobuf.append("%s message=JSON.parseObject(params,%s.class);\n");						
		vertxController_protobuf.append("MsgInterfaceVertx<%s,%s> bean=(MsgInterfaceVertx<%s,%s>)appctx.getBean(Bean_Vertx_"+ProtobufName+"_%s.class);\n");
		vertxController_protobuf.append(" ctx.response().end(bean.ProcessMsgInfo(message,ctx));\n}\n");
		vertxController_protobuf.append("@Override\n");
		vertxController_protobuf.append("public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n");
		vertxController_protobuf.append("appctx=applicationContext;\n }\n }\n");
		
		//-----------------------------msgpack1版本为了兼容第一个版本 接收json参数但是返回的是msgpack-----------
		StringBuilder vertxController_msgpack1=new StringBuilder();
		vertxController_msgpack1.append("package com.gojava.vertx.handler;\n");
		vertxController_msgpack1.append("import org.apache.log4j.Logger;\nimport java.io.IOException;\n").append("import org.springframework.beans.BeansException;\n");
		vertxController_msgpack1.append("import org.springframework.context.ApplicationContext;\n");
		vertxController_msgpack1.append("import org.springframework.context.ApplicationContextAware;\n");
		vertxController_msgpack1.append("import org.springframework.context.annotation.Bean;\n");
		vertxController_msgpack1.append("import org.springframework.context.annotation.Scope;\n");
		vertxController_msgpack1.append("import org.springframework.stereotype.Component;\n");
		vertxController_msgpack1.append("import com.gojava.com.gojava.App;\n import io.vertx.core.AbstractVerticle;\n");
		vertxController_msgpack1.append("import io.vertx.core.Handler;\nimport io.vertx.core.http.HttpServer;\nimport io.vertx.core.http.HttpServerOptions;\n");
		vertxController_msgpack1.append("import io.vertx.ext.web.Router;\nimport io.vertx.ext.web.RoutingContext;\nimport io.vertx.ext.web.Session;\n");
		vertxController_msgpack1.append("import io.vertx.ext.web.handler.BodyHandler;\n");
		vertxController_msgpack1.append("import com.alibaba.fastjson.JSON;\nimport com.gojava.com.gojava.App;\nimport com.gojava.interfaces.MsgInterfaceVertx;\nimport com.gojava.utils.GoUtils;\nimport com.gojava.vertx.beans.Bean_Vertx_"+ProtobufName+"_%s;\n");
		vertxController_msgpack1.append("import %s;\n");
		vertxController_msgpack1.append("import %s;\n");
		vertxController_msgpack1.append("import io.vertx.ext.web.handler.CookieHandler;\n");
		vertxController_msgpack1.append("import io.vertx.ext.web.handler.SessionHandler;\n");
		vertxController_msgpack1.append("import io.vertx.core.buffer.Buffer;\n");
		vertxController_msgpack1.append("import java.util.HashMap;\nimport java.util.Map;\n");
		vertxController_msgpack1.append("import io.vertx.ext.web.sstore.ClusteredSessionStore;\n");
		vertxController_msgpack1.append("import io.vertx.ext.web.sstore.LocalSessionStore;\n").append("import io.vertx.ext.web.sstore.SessionStore;\n");
		vertxController_msgpack1.append("public class vertx_"+ProtobufName+"_%s_MsgPack_Handler implements Handler<RoutingContext>,ApplicationContextAware{ \n");
		vertxController_msgpack1.append("ApplicationContext appctx;\n");
		//
		vertxController_msgpack1.append("org.msgpack.MessagePack msgpack=new org.msgpack.MessagePack();\n");
		vertxController_msgpack1.append("Logger loger=Logger.getLogger(App.class);\n");		
		vertxController_msgpack1.append("@Override\n");		
		vertxController_msgpack1.append("public void handle(RoutingContext ctx) {\n");
		vertxController_msgpack1.append("String json=GoUtils.ToJsonStr(ctx.getBodyAsString());\n");	
		vertxController_msgpack1.append("%s message=JSON.parseObject(json,%s.class);\n");						
		vertxController_msgpack1.append("MsgInterfaceVertx<%s,%s> bean=(MsgInterfaceVertx<%s,%s>)appctx.getBean(Bean_Vertx_"+ProtobufName+"_%s.class);\n");
		vertxController_msgpack1.append("Map beanMap=null;\n");
		vertxController_msgpack1.append("try {\n");
		vertxController_msgpack1.append("beanMap = bean.ProcessMsgInfo(message,ctx).toMap();\n");
	    vertxController_msgpack1.append("} catch (Exception e) {\n");
		vertxController_msgpack1.append("e.printStackTrace();\n");
		vertxController_msgpack1.append("}\n");
		vertxController_msgpack1.append("Map returnsMap=new HashMap();\n");
		vertxController_msgpack1.append("returnsMap.put(\"data\",beanMap);\n");
		vertxController_msgpack1.append("Buffer mb=	Buffer.buffer();\n");
		vertxController_msgpack1.append("byte[] outbytes=null;\n");
		vertxController_msgpack1.append("try {\n");
		vertxController_msgpack1.append("outbytes = msgpack.write(returnsMap);\n");
		vertxController_msgpack1.append("mb.appendBytes(outbytes);\n ctx.response().end(mb);\n");
		vertxController_msgpack1.append("} catch (IOException e) {\n");
		vertxController_msgpack1.append("returnsMap.put(\"err\",500);\n");
		vertxController_msgpack1.append("e.printStackTrace();\n}\n");
		vertxController_msgpack1.append("}\n");
		vertxController_msgpack1.append("@Override\n");
		vertxController_msgpack1.append("public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n");
		vertxController_msgpack1.append("appctx=applicationContext;\n }\n }\n");
		//---------------------- 先兼容第一个版本-------------------
	
		StringBuilder BeanStr=new StringBuilder();
		BeanStr.append("package com.gojava.msg.beans;\n");

		BeanStr.append("import org.springframework.beans.BeansException;\n");
		BeanStr.append("import org.springframework.context.ApplicationContext;\n");
		BeanStr.append("import org.springframework.context.ApplicationContextAware;\n");
		BeanStr.append("import com.gojava.interfaces.MsgInterface;\n");

		BeanStr.append("public final class Bean_%s implements ApplicationContextAware,MsgInterface<%s,%s> {\n");

		BeanStr.append("ApplicationContext ctx;\n");
		BeanStr.append("@Override\n");
		BeanStr.append("public %s ProcessMsgInfo(%s o) throws Exception {\n");
		// TODO Auto-generated method stub
		BeanStr.append("if(!verfiyval(o)){ throw new VerifyFieldValueNotPassException(\"Filed Vaule Verfiy Error\");}\n");
		BeanStr.append("//start\n");
		BeanStr.append("//end\n");
		BeanStr.append("return null;\n");
	    BeanStr.append("}\n");
		BeanStr.append("public static boolean verfiyval(%s o) {\n");
		// TODO Auto-generated method stub
		BeanStr.append("boolean val=true;\n");
		BeanStr.append("%s");
		BeanStr.append("return val;\n");
	    BeanStr.append("}\n");
	    BeanStr.append("@Override\n");
	    BeanStr.append("public void setApplicationContext(ApplicationContext arg0) throws BeansException {\n");
		// TODO Auto-generated method stub
		BeanStr.append("ctx=arg0;\n");
		BeanStr.append("}\n");
		BeanStr.append("}\n");
		
		
		
		//--------------------------------Bean Vertx---------------------
		beanVertx.append("package com.gojava.vertx.beans;\n");
		beanVertx.append("import org.springframework.beans.BeansException;\n");
		beanVertx.append("import com.gojava.util.*;\nimport com.gojava.vertx.bean.interfaces.LogicsInterfaces;\n");
		beanVertx.append("import io.vertx.ext.web.RoutingContext;\n");
		beanVertx.append("import org.springframework.context.ApplicationContext;\n");
		beanVertx.append("import org.springframework.context.ApplicationContextAware;\nimport com.gojava.errors.VerifyFieldValueNotPassException;");
		beanVertx.append("import com.gojava.interfaces.MsgInterfaceVertx;\n");
		beanVertx.append("import %s;\n");//bean自身的protobuf名字
		beanVertx.append("import %s;\n");//bean的引用BEAN名字
		beanVertx.append("public final class Bean_Vertx_"+ProtobufName+"_%s implements ApplicationContextAware,MsgInterfaceVertx<%s,%s> {\n");
		beanVertx.append("ApplicationContext appctx;\n");
		beanVertx.append("@Override\n");
		beanVertx.append("public %s ProcessMsgInfo(%s o,RoutingContext ctx) throws Exception {\n");
		// TODO Auto-generated method stub
		beanVertx.append("if(!verfiyval(o)){ throw new VerifyFieldValueNotPassException(\"Filed Vaule Verfiy Error\");}\n");
		beanVertx.append("//start\n");
		beanVertx.append("//end\n");
	    beanVertx.append("LogicsInterfaces<%s,%s> dobean=(LogicsInterfaces<%s,%s>)appctx.getBean(\""+ProtobufName+"_%s\");\n");
	    beanVertx.append("return dobean.DoBean(o,ctx);\n");
		beanVertx.append("}\n");
	    beanVertx.append("public  boolean verfiyval(%s o) {\n");
		// TODO Auto-generated method stub
	    beanVertx.append("boolean val=true;\n");
	    beanVertx.append("%s");
	    beanVertx.append("return val;\n");
	    beanVertx.append("}\n");
	    beanVertx.append("@Override\n");
	    beanVertx.append("public void setApplicationContext(ApplicationContext arg0) throws BeansException {\n");
		// TODO Auto-generated method stub
	    beanVertx.append("appctx=arg0;\n");
	    beanVertx.append("}\n");
	    beanVertx.append("}\n");
	    
		//---------------------------------------------------
		beanController.append("package com.gojava.msg.controllers;\n");
		beanController.append("import org.springframework.http.MediaType;\nimport com.alibaba.fastjson.JSON;\n");
		beanController.append("import org.springframework.stereotype.Component;\n");
		beanController.append("import org.springframework.ui.Model;\n");
		beanController.append("import com.gojava.interfaces;\n");
		beanController.append("import com.gojava.msg.beans;\n");
		beanController.append("import org.springframework.web.bind.annotation.GetMapping;\n");
		beanController.append("import org.springframework.web.bind.annotation.PostMapping;\n");
		beanController.append("import org.springframework.web.bind.annotation.RequestMapping;\n");
		beanController.append("import org.springframework.web.bind.annotation.RestController;\n");
		beanController.append("@Component\n");
		beanController.append("@RestController\n");
		beanController.append("@RequestMapping(\"/api/%s\")\n");
		beanController.append("public class %s_Controller implements ApplicationContextAware{\n");
		beanController.append("%s\n");
		beanGetController.append("@GetMapping(path=\"/%s/{params}\",produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n");
		beanGetController.append("public String Get_%s(@PathVariable String params) {\n");
		beanGetController.append(" %s message=JSON.parseObject(params,%s.class);\n");
		beanGetController.append(" MsgInterface<%s,%s> bean=ctx.getBeansOfType(Bean_%s.class)\n");
		beanGetController.append(" return bean.ProcessMsgInfo(message);\n");
		beanGetController.append(" }\n");
		
		beanController.append("@Override\n");
		beanController.append("public void setApplicationContext(ApplicationContext arg0) throws BeansException {\n");
		// TODO Auto-generated method stub
		beanController.append("ctx=arg0;\n");
		beanController.append("}\n");
		beanPostController.append("@PostMapping(path='/%s/{params}',consumes = 'application/json', produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n");
		beanPostController.append("public String Post_%s(@PathVariable String params){\n");
		beanPostController.append(" %s message=JSON.parseObject(params,%s.class);\n");
		beanPostController.append(" MsgInterface<%s,%s> bean=ctx.getBeansOfType(Bean_%s.class)\n");
		beanPostController.append(" return bean.ProcessMsgInfo(message);\n");
		beanPostController.append(" }\n");
		//--------------- 兼容msgpack---------------------
	/*	beanPostController.append("@PostMapping(path='/%s/{params}',consumes = 'application/msgpack', produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n");
		beanPostController.append("public String Post_%s(@PathVariable String params){\n");
		beanPostController.append(" %s message=JSON.parseObject(params,%s.class);\n");
		beanPostController.append(" MsgInterface<%s,%s> bean=ctx.getBeansOfType(Bean_%s.class)\n");
		beanPostController.append(" return bean.ProcessMsgInfo(message);\n");
		beanPostController.append(" }\n");*/
		
	    beanController.append("}\n"); 
	    StringBuilder BeanControllers=new StringBuilder();
	    StringBuilder LuaTmps=new StringBuilder();
	    LuaTmps.append("local HttpHelper={}\n");
	    LuaTmps.append("local ApiURL=sprint.config(\"serverURL2\")\n");
	    
	    JSONArray ListMsgObj=new JSONArray();
	    jsonObj.put("List", ListMsgObj);	   
		for (ProtobufMessage curMessage : parser.getMessages()) {
			if(curMessage.getRecvMsgName()!=null){
				JSONObject msgObj=new JSONObject();
				ListMsgObj.add(msgObj);
				msgObj.put("Name",curMessage.getName());
				JSONArray listfileds=new JSONArray();
				msgObj.put("List", listfileds);
				if(LuaHttpScripts!=null){
						LuaTmps.append(String.format(functionTmplua,ProtobufName,curMessage.getName(),ProtobufName,curMessage.getName()));
				}
				
				StringBuilder filedverfiy=new StringBuilder();  
				goBuilderXML.append("{\"Path\":\"").append("/").append(ProtobufName).append("/").append(curMessage.getName()).append("\",");
				goBuilderXML.append("\"Json\":\"").append("b_vertx_").append(ProtobufName).append("_").append(curMessage.getName()).append("_Json_Handler\",");
				goBuilderXML.append("\"MsgPack\":\"").append("b_vertx_").append(ProtobufName).append("_").append(curMessage.getName()).append("_MsgPack_Handler\"},\n");
				for(ProtobufField curfield:curMessage.getFields()){
					JSONObject FiledObj=new JSONObject();
					FiledObj.put("Name", curfield.getName());
					FiledObj.put("Type", curfield.getFullyClarifiedJavaType());
					listfileds.add(FiledObj);
					
					if(curfield.getType().contains("int32")){
						if(curfield.getMaxval().equals("none")&&curfield.getMinval().equals("none")){
						}else{
						int maxv=curfield.getMaxval().equals("none")?Integer.MAX_VALUE:Integer.parseInt(curfield.getMaxval());
						int minv=curfield.getMinval().equals("none")?Integer.MIN_VALUE:Integer.parseInt(curfield.getMinval());
						filedverfiy.append("val=val&&VarVerfiyValue.Clamp(o.get").append(BeOne(curfield.getName())+"()"); 
						filedverfiy.append(",").append(maxv).append(",").append(minv).append(");");
						}
					}else if(curfield.getType().contains("int64")){
						if(curfield.getMaxval().equals("none")&&curfield.getMinval().equals("none")){
							
						}else{
						long maxv=curfield.getMaxval().equals("none")?Long.MAX_VALUE:Long.parseLong(curfield.getMaxval());
						long minv=curfield.getMinval().equals("none")?Long.MIN_VALUE:Long.parseLong(curfield.getMinval());
						filedverfiy.append("val=val&&VarVerfiyValue.Clamp(o.get").append(BeOne(curfield.getName())+"()"); 
						filedverfiy.append(",").append(maxv).append(",").append(minv).append(");");
						
						}
					}else if(curfield.getType().contains("double")){
						if(curfield.getMaxval().equals("none")&&curfield.getMinval().equals("none")){
							
						}else{
							double maxv=curfield.getMaxval().equals("none")?Double.MAX_VALUE:Double.parseDouble(curfield.getMaxval());
							double minv=curfield.getMinval().equals("none")?Double.MIN_VALUE:Double.parseDouble(curfield.getMinval());
						filedverfiy.append("val=val&&VarVerfiyValue.Clamp(o.get").append(BeOne(curfield.getName())+"()"); 
						filedverfiy.append(",").append(maxv).append(",").append(minv).append(");");
						}
					}else if(curfield.getType().contains("float")){
						if(curfield.getMaxval().equals("none")&&curfield.getMinval().equals("none")){
							
						}else{
							float maxv=curfield.getMaxval().equals("none")?Float.MAX_VALUE:Float.parseFloat(curfield.getMaxval());
							float minv=curfield.getMinval().equals("none")?Float.MIN_VALUE:Float.parseFloat(curfield.getMinval());
							filedverfiy.append("val=val&&VarVerfiyValue.Clamp(o.get").append(BeOne(curfield.getName())+"()"); 
							filedverfiy.append(",").append(maxv).append(",").append(minv).append(");");
						}
					}else if(curfield.getType().contains("string")){
						int maxlen=curfield.getMaxlen().equals("none")?Integer.MAX_VALUE:Integer.parseInt(curfield.getMaxval());
						int minlen=curfield.getMinlen().equals("none")?Integer.MIN_VALUE:Integer.parseInt(curfield.getMinval());
						filedverfiy.append("val=val&&VarVerfiyValue.StringRegx(o.get").append(BeOne(curfield.getName())+"()"); 
						filedverfiy.append(",").append(maxlen).append(",").append(minlen).append(",\"").append(curfield.getStrregx()).append("\");");
					}
				}
				//写入BEAN
				String beanstring=String.format(BeanStr.toString(),curMessage.getName(),curMessage.getName(),curMessage.getRecvMsgName(),curMessage.getRecvMsgName(),curMessage.getName(),curMessage.getName(),filedverfiy.toString());
				//写入beancontroller 
				/*String beangetstring=String.format(beanGetController.toString(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getRecvMsgName(),
						curMessage.getName());
				String beanpostetstring=String.format(beanPostController.toString(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getRecvMsgName(),
						curMessage.getName());*/
			
		//		BeanControllers.append(beangetstring).append("\n").append(beanpostetstring).append("\n");
				
				String realPath=BeanLogicDIr.getPath()+"/Bean_Logic_"+ProtobufName+"_"+curMessage.getName()+".java";
				File beanlogic=new File(realPath);
				if(!beanlogic.exists()){
					String createGO=String.format(LogiceTmpCode.toString(),
							packageName+"."+curMessage.getName()+"",
							curMessage.getRecvPackage()+"."+curMessage.getRecvMsgName(),
							curMessage.getName(),
							curMessage.getName(),
							curMessage.getRecvMsgName(),
							curMessage.getRecvMsgName(),
							curMessage.getName()
							);
					WriteFileBuffer(BeanLogicDIr,"Bean_Logic_"+ProtobufName+"_"+curMessage.getName(),createGO);
				}
				
				String tmpbeam="<bean id=\"%s\"  class=\"%s\"></bean>\n";
				LogicBeanXML.append(String.format(tmpbeam, ProtobufName+"_bean_"+curMessage.getName()+"","com.gojava.vertx.bean.logics.Bean_Logic_"+ProtobufName+"_"+curMessage.getName()+""));
				
				BeanSpringGo.append(String.format(tmpbeam, "b_vertx_"+ProtobufName+"_"+curMessage.getName()+"_Json_Handler","com.gojava.vertx.handler.vertx_"+ProtobufName+"_"+curMessage.getName()+"_Json_Handler"));
				//-----------vertx-------------------------
				String vertxJSON=String.format(vertxController.toString(),curMessage.getName(),
						packageName+"."+curMessage.getName()+"",
						curMessage.getRecvPackage()+"."+curMessage.getRecvMsgName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getRecvMsgName(),
						curMessage.getName(),
						curMessage.getRecvMsgName(),
						curMessage.getName()
						);
				WriteFileBuffer(VertxHanlderJSONDir,"vertx_"+ProtobufName+"_"+curMessage.getName()+"_Json_Handler",vertxJSON);
				BeanSpringGo.append(String.format(tmpbeam, "b_vertx_"+ProtobufName+"_"+curMessage.getName()+"_MsgPack_Handler","com.gojava.vertx.handler.vertx_"+ProtobufName+"_"+curMessage.getName()+"_MsgPack_Handler"));
				String vertxMsgPackOne=String.format(vertxController_msgpack1.toString(),
						curMessage.getName(),
						packageName+"."+curMessage.getName()+"",
						curMessage.getRecvPackage()+"."+curMessage.getRecvMsgName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getRecvMsgName(),
						curMessage.getName(),
						curMessage.getRecvMsgName(),
						curMessage.getName()
						);
				WriteFileBuffer(VertxHanlderMsgPackDir,"vertx_"+ProtobufName+"_"+curMessage.getName()+"_MsgPack_Handler",vertxMsgPackOne);
				
				String vertBeanString=String.format(beanVertx.toString(),
						packageName+"."+curMessage.getName()+"",
						curMessage.getRecvPackage()+"."+curMessage.getRecvMsgName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getRecvMsgName(),
						curMessage.getRecvMsgName(),
						curMessage.getName(),
						curMessage.getName(),
						curMessage.getRecvMsgName(),
						curMessage.getName(),
						curMessage.getRecvMsgName(),
						"bean_"+curMessage.getName(),
						curMessage.getName(),
						filedverfiy.toString()
						);
				WriteFileBuffer(VertxBeanDir,"Bean_Vertx_"+ProtobufName+"_"+curMessage.getName()+"",vertBeanString);
				//
				BeanSpringGo.append(String.format(tmpbeam, "com.gojava.vertx.beans.Bean_Vertx_"+ProtobufName+"_"+curMessage.getName()+"","com.gojava.vertx.beans.Bean_Vertx_"+ProtobufName+"_"+curMessage.getName()+""));
				String beanControllerString1=String.format(beanController.toString(),ProtobufName,ProtobufName,BeanControllers.toString());
			}
			
			String curMessageData = generateMessage(curMessage, parser.getOuterClassName(), config);
			String serializerData = generateSerializer(curMessage, parser.getOuterClassName(), config);
			
			
		
			//WriteFileBuffer(BeanDir,"Bean_"+curMessage.getName(),beanstring);
			if (parser.getOuterClassName() != null && w != null) {
				w.append(curMessageData);
				w.append(serializerData);
			} else {
				BufferedWriter messageWriter = new BufferedWriter(new FileWriter(new File(output, curMessage.getName() + ".java")));
				appendPackage(messageWriter, parser.getPackageName());
				messageWriter.append(curMessageData);
				messageWriter.flush();
				messageWriter.close();
				messageWriter = new BufferedWriter(new FileWriter(new File(output, curMessage.getName() + "Serializer" + ".java")));
				appendPackage(messageWriter, parser.getPackageName());
				messageWriter.append(serializerData);
				messageWriter.flush();
				messageWriter.close();
			}
		
			
			//-------------vertx----------------------
		}
		
		

		if (parser.getOuterClassName() != null && w != null) {
			w.append("}\n\n");
			w.flush();
			w.close();
		}
		if(LuaHttpScripts!=null){
			LuaTmps.append("return HttpHelper\n");
			WriteFileBufferExt(LuaHttpScripts,"HttpHelper",LuaTmps.toString(),".lua"); 
		}
		//写入beancontroller 
		//WriteFileBuffer(BeanControllerDir,ProtobufName+"_Controller",beanControllerString1);
		if (config.isInterfaceBased()) {
			String generateDefaultImpl = System.getProperty("generate.default");
			if (generateDefaultImpl != null && generateDefaultImpl.equals("true")) {
				for (ProtobufMessage curMessage : parser.getMessages()) {
					generateDefaultMessageImpl(curMessage, output, parser.getPackageName());
				}
			}
		}
		
		copy("ProtobufOutputStream.java", output, parser.getPackageName());
		copy("ProtobufInputStream.java", output, parser.getPackageName());
		copy("CurrentCursor.java", output, parser.getPackageName());
		if (config.isInterfaceBased()) {
			copy("MessageFactory.java", output, parser.getPackageName());
		}
	}
	private static void process(File output, MemlessParser parser) throws IOException, Exception {
		String packageName = parser.getPackageName();
		if (packageName != null) {
			output = createPackage(output, packageName);
		}

		BufferedWriter w = null;
		if (parser.getOuterClassName() != null) {
			w = new BufferedWriter(new FileWriter(new File(output, parser.getOuterClassName() + ".java")));
			w.append(HEADER);
			appendPackage(w, parser.getPackageName());
			w.append("public final class ");
			w.append(parser.getOuterClassName());
			w.append(" {\nprivate ");
			w.append(parser.getOuterClassName());
			w.append("() {}\n");
		}

		for (ProtobufEnum curEnum : parser.getEnums()) {
			String curEnumData = generateEnum(curEnum);
			if (parser.getOuterClassName() != null && w != null) {
				w.append(curEnumData);
			} else {
				BufferedWriter enumWriter = new BufferedWriter(new FileWriter(new File(output, curEnum.getName() + ".java")));
				appendPackage(enumWriter, parser.getPackageName());
				enumWriter.append(curEnumData);
				enumWriter.flush();
				enumWriter.close();
			}
		} 
		GeneratorConfiguration config = new GeneratorConfiguration(System.getProperties());
		for (ProtobufMessage curMessage : parser.getMessages()) {
			String curMessageData = generateMessage(curMessage, parser.getOuterClassName(), config);
			String serializerData = generateSerializer(curMessage, parser.getOuterClassName(), config);
			if (parser.getOuterClassName() != null && w != null) {
				w.append(curMessageData);
				w.append(serializerData);
			} else {
				BufferedWriter messageWriter = new BufferedWriter(new FileWriter(new File(output, curMessage.getName() + ".java")));
				appendPackage(messageWriter, parser.getPackageName());
				messageWriter.append(curMessageData);
				messageWriter.flush();
				messageWriter.close();
				messageWriter = new BufferedWriter(new FileWriter(new File(output, curMessage.getName() + "Serializer" + ".java")));
				appendPackage(messageWriter, parser.getPackageName());
				messageWriter.append(serializerData);
				messageWriter.flush();
				messageWriter.close();
			}
		}

		if (parser.getOuterClassName() != null && w != null) {
			w.append("}\n\n");
			w.flush();
			w.close();
		}

		if (config.isInterfaceBased()) {
			String generateDefaultImpl = System.getProperty("generate.default");
			if (generateDefaultImpl != null && generateDefaultImpl.equals("true")) {
				for (ProtobufMessage curMessage : parser.getMessages()) {
					generateDefaultMessageImpl(curMessage, output, parser.getPackageName());
				}
			}
		}
		copy("ProtobufOutputStream.java", output, parser.getPackageName());
		copy("ProtobufInputStream.java", output, parser.getPackageName());
		copy("CurrentCursor.java", output, parser.getPackageName());
		if (config.isInterfaceBased()) {
			copy("MessageFactory.java", output, parser.getPackageName());
		}
	}

	private static void copy(String classpathFileName, File output, String packageName) throws IOException {
		InputStream protobufOutputStream = MemlessGenerator.class.getClassLoader().getResourceAsStream(classpathFileName);
		if (protobufOutputStream == null) {
			throw new IOException("Cannot find " + classpathFileName + " in classpath");
		}
		FileOutputStream fos = null;
		try {
			fos = new FileOutputStream(new File(output, classpathFileName));
			copy(protobufOutputStream, fos, packageName);
		} finally {
			protobufOutputStream.close();
			if (fos != null) {
				fos.close();
			}
		}
	}

	private static void copy(InputStream input, OutputStream output, String packageName) throws IOException {
		String curLine = null;
		BufferedReader r = new BufferedReader(new InputStreamReader(input));
		BufferedWriter w = new BufferedWriter(new OutputStreamWriter(output));
		while ((curLine = r.readLine()) != null) {
			String trimmedLine = curLine.trim();
			if (trimmedLine.startsWith("package ")) {
				curLine = "package " + packageName + ";\n";
			}
			w.append(curLine);
			w.append("\n");
		}
		w.flush();
	}

	private static String generateSerializer(ProtobufMessage curMessage, String outerClassName, GeneratorConfiguration config) {
		StringBuilder result = new StringBuilder();
		String fullMessageType = curMessage.getFullyClarifiedJavaName();
		if (outerClassName == null) {
			result.append("public final class ");
		} else {
			result.append("public static class ");
		}
		result.append(curMessage.getName());
		result.append("Serializer {\n");
		createSerializeToBytes(curMessage, result, fullMessageType);
		createSerializeToStream(curMessage, result, fullMessageType);
		createParseFromBytes(config.isInterfaceBased(), result, fullMessageType);
		createParseFromBytesWithLimit(config.isInterfaceBased(), result, fullMessageType);
		createParseFromBytesCursor(curMessage, config.isInterfaceBased(), result, fullMessageType);
		createParseFromStream(config.isInterfaceBased(), result, fullMessageType);
		createParseFromStreamWithLength(config.isInterfaceBased(), result, fullMessageType);
		createParseFromStreamCursor(curMessage, config.isInterfaceBased(), result, fullMessageType);
		//从JSON的对象数组中解析得到一个Message对象
		//createParseFromMapJson(config.isInterfaceBased(), result, fullMessageType);
		//创建解析JSON Map到对象的代码
		//createParseFromJson(curMessage,config.isInterfaceBased(),result,fullMessageType);
		if (hasRequired(curMessage)) {
			createAssertInitialized(curMessage, result, fullMessageType);
		}
		result.append("}\n");
		return result.toString();
	}

	private static void createParseFromJson(ProtobufMessage curMessage, boolean interfaceBased, StringBuilder result,
			String fullMessageType) {
		// TODO Auto-generated method stub
		Map<String,Object> o;
		String factory = "";
		if (interfaceBased) {
			result.append("public static " + fullMessageType + " parseFromMap(MessageFactory factory,Map<String,Object> data, CurrentCursor cursor) throws java.io.IOException {\n");
			result.append(fullMessageType + " message = (" + curMessage.getFullyClarifiedJavaName() + ")factory.create(\"" + curMessage.getFullyClarifiedJavaName() + "\");\n");
			result.append("if( message == null ) { \n");
			result.append("throw new java.io.IOException(\"Factory create invalid message for type: " + curMessage.getFullyClarifiedJavaName() + "\");\n");
			result.append("}\n");
			factory = "factory, ";
		} else {
			result.append("public static " + fullMessageType + " parseFromMap(Map<String,Object> data, CurrentCursor cursor) throws java.io.IOException {\n");
			result.append(fullMessageType + " message = new " + fullMessageType + "();\n");
		}
		result.append("while(true) {\n");
		result.append("if (ProtobufInputStream.isAtEnd(data, cursor)) {\n");
		result.append("return message;\n");
		result.append("}\n");
		result.append("int varint = ProtobufInputStream.readRawVarint32(data, cursor);\n");
		result.append("int tag = ProtobufInputStream.getTagFieldNumber(varint);\n");
		if (curMessage.isGroup()) {
			result.append("int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;\n");
			result.append("if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {\n");
			result.append("return message;\n");
			result.append("}\n");
		}
		result.append("switch(tag) {\n");
		result.append("case 0: \n");
		result.append("return message;\n ");
		result.append("default: \n ProtobufInputStream.skipUnknown(varint, data, cursor);\n break;\n");
		for (ProtobufField curField : curMessage.getFields()) {
			result.append("case " + curField.getTag() + ": \n");
			if (curField.isEnumType()) {
				if (curField.getNature().equals("repeated")) {
					result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
					result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
					result.append("}\n");
					result.append("message.get" + curField.getBeanName() + "().add(" + curField.getFullyClarifiedJavaType() + ".valueOf(ProtobufInputStream.readEnum(data,cursor)));\n");
				} else {
					result.append("message.set" + curField.getBeanName() + "(" + curField.getFullyClarifiedJavaType() + ".valueOf(ProtobufInputStream.readEnum(data,cursor)));\n");
				}
			} else if (curField.isComplexType()) {
				if (curField.isGroup()) {
					if (curField.getNature().equals("repeated")) {
						result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
						result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
						result.append("}\n");
						result.append(curField.getFullyClarifiedJavaType() + " temp" + curField.getBeanName() + " = " + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "data, cursor);\n");
						result.append("message.get" + curField.getBeanName() + "().add(temp" + curField.getBeanName() + ");\n");
					} else {
						result.append(curField.getFullyClarifiedJavaType() + " temp" + curField.getBeanName() + " = " + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "data, cursor);\n");
						result.append("message.set" + curField.getBeanName() + "(temp" + curField.getBeanName() + ");\n");
					}
				} else if (curField.getNature().equals("repeated")) {
					result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
					result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
					result.append("}\n");
					result.append("int length" + curField.getBeanName() + " = ProtobufInputStream.readRawVarint32(data,cursor);\n");
					result.append("message.get" + curField.getBeanName() + "().add(" + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "data, cursor.getCurrentPosition(), length" + curField.getBeanName() + "));\n");
					result.append("cursor.addToPosition(length" + curField.getBeanName() + ");\n");
				} else {
					result.append("int length" + curField.getBeanName() + " = ProtobufInputStream.readRawVarint32(data,cursor);\n");
					result.append("message.set" + curField.getBeanName() + "(" + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "data, cursor.getCurrentPosition(), length" + curField.getBeanName() + "));\n");
					result.append("cursor.addToPosition(length" + curField.getBeanName() + ");\n");
				}
			} else if (curField.getType().equals("bytes")) {
				result.append("message.set" + curField.getBeanName() + "(ProtobufInputStream.readBytes(data,cursor));\n");
			} else {
				if (curField.getNature().equals("repeated")) {
					result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
					result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
					result.append("}\n");
					result.append("message.get" + curField.getBeanName() + "().add(ProtobufInputStream.read" + curField.getStreamBeanType() + "(data,cursor));\n");
				} else {
					result.append("message.set" + curField.getBeanName() + "(ProtobufInputStream.read" + curField.getStreamBeanType() + "(data,cursor));\n");
				}
			}
			result.append("break;\n");
		}
		result.append("}\n");
		result.append("}\n");
		result.append("}\n");
	}

	private static void createParseFromMapJson(boolean interfaceBased, StringBuilder result, String fullMessageType) {
		// TODO Auto-generated method stub
		if (interfaceBased) {
			result.append("public static " + fullMessageType + " parseFromMap(MessageFactory factory,Map<String,Object> data) throws java.io.IOException {\n");
		} else {
			result.append("public static " + fullMessageType + " parseFromMap(Map<String,Object> data) throws java.io.IOException {\n");
		}
		result.append("CurrentCursor cursor = new CurrentCursor();\n");
		if (interfaceBased) {
			result.append("return parseFromMap(factory, data, cursor);\n");
		} else {
			result.append("return parseFromMap(data, cursor);\n");
		}
		result.append("}\n");
	}

	private static void createSerializeToBytes(ProtobufMessage curMessage, StringBuilder result, String fullMessageType) {
		result.append("public static byte[] serialize(" + fullMessageType + " message) {\n");
		if (curMessage.getFields().isEmpty()) {
			result.append("return new byte[0];\n");
		} else {
			result.append("try {\n");
			if (hasRequired(curMessage)) {
				result.append("assertInitialized(message);\n");
			}
			result.append("int totalSize = 0;\n");
			for (ProtobufField curField : curMessage.getFields()) {
				if (curField.isEnumType()) {
					if (curField.getNature().equals("repeated")) {
						result.append("byte[] " + curField.getName() + "Buffer = null;\n");
						result.append("if (message.has" + curField.getBeanName() + "()) {\n");
						result.append("java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n");
						result.append("for( int i=0;i<message.get" + curField.getBeanName() + "().size();i++) {\n");
						result.append("ProtobufOutputStream.writeEnum(" + curField.getTag() + ", message.get" + curField.getBeanName() + "().get(i).getValue(), baos);\n");
						result.append("}\n");
						result.append(curField.getName() + "Buffer = baos.toByteArray();\n");
						result.append("totalSize += " + curField.getName() + "Buffer.length;\n");
					} else {
						result.append("if (message.has" + curField.getBeanName() + "()) {\n");
						result.append("totalSize += ProtobufOutputStream.computeEnumSize(" + curField.getTag() + ", message.get" + curField.getBeanName() + "().getValue());\n");
					}
					result.append("}\n");
					continue;
				}
				if (curField.isComplexType()) {
					result.append("byte[] " + curField.getName() + "Buffer = null;\n");
					result.append("if (message.has" + curField.getBeanName() + "()) {\n");
					if (curField.getNature().equals("repeated")) {
						result.append("java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n");
						result.append("for( int i=0;i<message.get" + curField.getBeanName() + "().size();i++) {\n");
						result.append("byte[] curMessageData = " + curField.getFullyClarifiedJavaType() + "Serializer.serialize(message.get" + curField.getBeanName() + "().get(i));\n");
						if (curField.isGroup()) {
							result.append("ProtobufOutputStream.writeTag(" + curField.getTag() + ", ProtobufInputStream.WIRETYPE_GROUP_START, baos);\n");
							result.append("baos.write(curMessageData);\n");
							result.append("ProtobufOutputStream.writeTag(" + curField.getTag() + ", ProtobufInputStream.WIRETYPE_GROUP_END, baos);\n");
						} else {
							result.append("ProtobufOutputStream.writeMessageTag(" + curField.getTag() + ", baos);\n");
							result.append("ProtobufOutputStream.writeRawVarint32(curMessageData.length, baos);\n");
							result.append("baos.write(curMessageData);\n");
						}
						result.append("}\n");
						result.append(curField.getName() + "Buffer = baos.toByteArray();\n");
					} else {
						if (curField.isGroup()) {
							result.append("java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n");
							result.append("ProtobufOutputStream.writeTag(" + curField.getTag() + ", ProtobufInputStream.WIRETYPE_GROUP_START, baos);\n");
							result.append("baos.write(" + curField.getFullyClarifiedJavaType() + "Serializer.serialize(message.get" + curField.getBeanName() + "()));\n");
							result.append("ProtobufOutputStream.writeTag(" + curField.getTag() + ", ProtobufInputStream.WIRETYPE_GROUP_END, baos);\n");
							result.append(curField.getName() + "Buffer = baos.toByteArray();\n");
						} else {
							result.append(curField.getName() + "Buffer = " + curField.getFullyClarifiedJavaType() + "Serializer.serialize(message.get" + curField.getBeanName() + "());\n");
							result.append("totalSize += ProtobufOutputStream.computeTagSize(" + curField.getTag() + ");\n");
							result.append("totalSize += ProtobufOutputStream.computeRawVarint32Size(" + curField.getName() + "Buffer.length);\n");
						}
					}
					result.append("totalSize += " + curField.getName() + "Buffer.length;\n");
					result.append("}\n");
					continue;
				}
				if (curField.getType().equals("string")) {
					result.append("byte[] " + curField.getName() + "Buffer = null;\n");
					result.append("if (message.has" + curField.getBeanName() + "()) {\n");
					if (curField.getNature().equals("repeated")) {
						result.append("java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n");
						result.append("for( int i=0;i<message.get" + curField.getBeanName() + "().size();i++) {\n");
						result.append("ProtobufOutputStream.writeString(" + curField.getTag() + ", message.get" + curField.getBeanName() + "().get(i), baos);\n");
						result.append("}\n");
						result.append(curField.getName() + "Buffer = baos.toByteArray();\n");
						result.append("totalSize += " + curField.getName() + "Buffer.length;\n");
					} else {
						result.append(curField.getName() + "Buffer = message.get" + curField.getBeanName() + "().getBytes(\"UTF-8\");\n");
						result.append("totalSize += " + curField.getName() + "Buffer.length;\n");
						result.append("totalSize += ProtobufOutputStream.computeTagSize(" + curField.getTag() + ");\n");
						result.append("totalSize += ProtobufOutputStream.computeRawVarint32Size(" + curField.getName() + "Buffer.length);\n");
					}
					result.append("}\n");
					continue;
				}

				if (curField.getNature().equals("repeated")) {
					result.append("if (message.has" + curField.getBeanName() + "()) {\n");
					if (curField.getType().equals("bytes")) {
						result.append("totalSize += ProtobufOutputStream.computeBytesSize(" + curField.getTag() + ", message.get" + curField.getBeanName() + "());\n");
					} else {
						result.append("for(int i=0;i<message.get" + curField.getBeanName() + "().size();i++) {\n");
						result.append("totalSize += ProtobufOutputStream.compute" + curField.getStreamBeanType() + "Size(" + curField.getTag() + ", message.get" + curField.getBeanName() + "().get(i));\n");
						result.append("}\n");
					}
					result.append("}\n");
				} else {
					result.append("if (message.has" + curField.getBeanName() + "()) {\n");
					result.append("totalSize += ");
					if (curField.getType().equals("bytes")) {
						result.append("message.get" + curField.getBeanName() + "().length;\n");
						result.append("totalSize += ProtobufOutputStream.computeTagSize(" + curField.getTag() + ");\n");
						result.append("totalSize += ProtobufOutputStream.computeRawVarint32Size(message.get" + curField.getBeanName() + "().length);\n");
					} else {
						result.append("ProtobufOutputStream.compute" + curField.getStreamBeanType() + "Size(" + curField.getTag() + ", message.get" + curField.getBeanName() + "());\n");
					}
					result.append("}\n");
				}
			}
			result.append("final byte[] result = new byte[totalSize];\nint position = 0;\n");
			for (ProtobufField curField : curMessage.getFields()) {
				result.append("if (message.has" + curField.getBeanName() + "()) {\n");
				if (curField.getType().equals("string")) {
					if (curField.getNature().equals("repeated")) {
						result.append("position = ProtobufOutputStream.writeRawBytes(" + curField.getName() + "Buffer, result, position);\n");
					} else {
						result.append("position = ProtobufOutputStream.writeString(" + curField.getTag() + "," + curField.getName() + "Buffer, result, position);\n");
					}
					result.append("}\n");
					continue;
				}

				if (curField.isEnumType()) {
					if (curField.getNature().equals("repeated")) {
						result.append("position = ProtobufOutputStream.writeRawBytes(" + curField.getName() + "Buffer, result, position);\n");
					} else {
						result.append("position = ProtobufOutputStream.writeEnum(" + curField.getTag() + ", message.get" + curField.getBeanName() + "().getValue(), result, position);\n");
					}
					result.append("}\n");
					continue;
				}

				if (curField.getNature().equals("repeated")) {
					if (curField.isComplexType()) {
						result.append("position = ProtobufOutputStream.writeRawBytes(" + curField.getName() + "Buffer, result, position);\n");
					} else {
						result.append("position = ProtobufOutputStream.writeRepeated" + curField.getStreamBeanType() + "(" + curField.getTag() + ", message.get" + curField.getBeanName() + "(), result, position);\n");
					}
				} else if (curField.isGroup()) {
					result.append("position = ProtobufOutputStream.writeRawBytes(" + curField.getName() + "Buffer, result, position);\n");
				} else {
					result.append("position = ProtobufOutputStream.write");
					if (!curField.isComplexType()) {
						result.append(curField.getStreamBeanType());
						result.append("(");
						result.append(curField.getTag());
						result.append(", message.get");
						result.append(curField.getBeanName());
						result.append("(), result, position);\n");
					} else {
						result.append("Bytes(" + curField.getTag() + ", " + curField.getName() + "Buffer, result, position);\n");
					}
				}
				result.append("}\n");
			}
			result.append("ProtobufOutputStream.checkNoSpaceLeft(result, position);\n");
			result.append("return result;\n");
			result.append("} catch (Exception e) {\n");
			result.append("throw new RuntimeException(e);\n");
			result.append("}\n");
		}
		result.append("}\n");
	}

	private static void createAssertInitialized(ProtobufMessage curMessage, StringBuilder result, String fullMessageType) {
		result.append("private static void assertInitialized(");
		result.append(fullMessageType);
		result.append(" message) {\n");
		for (ProtobufField curField : curMessage.getFields()) {
			if (curField.getNature().equals("required")) {
				result.append("if( !message.has" + curField.getBeanName() + "()) {\n");
				result.append("throw new IllegalArgumentException(\"Required field not initialized: ");
				result.append(curField.getName());
				result.append("\");\n}\n");
			}
		}
		result.append("}\n");
	}

	private static void createSerializeToStream(ProtobufMessage curMessage, StringBuilder result, String fullMessageType) {
		result.append("public static void serialize(" + fullMessageType + " message, java.io.OutputStream os) {\n");
		if (curMessage.getFields().isEmpty()) {
			result.append("return; \n");
		} else {
			result.append("try {\n");
			if (hasRequired(curMessage)) {
				result.append("assertInitialized(message);\n");
			}

			for (ProtobufField curField : curMessage.getFields()) {
				result.append("if (message.has" + curField.getBeanName() + "()) {\n");
				if (curField.getType().equals("string")) {
					if (curField.getNature().equals("repeated")) {
						result.append("for( int i=0;i<message.get" + curField.getBeanName() + "().size();i++) {\n");
						result.append("ProtobufOutputStream.writeString(" + curField.getTag() + ", message.get" + curField.getBeanName() + "().get(i), os);\n");
						result.append("}\n");
					} else {
						result.append("ProtobufOutputStream.writeString(" + curField.getTag() + ", message.get" + curField.getBeanName() + "(), os);\n");
					}
				} else if (curField.isEnumType()) {
					if (curField.getNature().equals("repeated")) {
						result.append("for( int i=0;i<message.get" + curField.getBeanName() + "().size();i++) {\n");
						result.append("ProtobufOutputStream.writeEnum(" + curField.getTag() + ", message.get" + curField.getBeanName() + "().get(i).getValue(), os);\n");
						result.append("}\n");
					} else {
						result.append("ProtobufOutputStream.writeEnum(" + curField.getTag() + ", message.get" + curField.getBeanName() + "().getValue(), os);\n");
					}
				} else if (curField.isGroup()) {
					if (curField.getNature().equals("repeated")) {
						result.append("for( int i=0;i<message.get" + curField.getBeanName() + "().size();i++) {\n");
						result.append("ProtobufOutputStream.writeTag(" + curField.getTag() + ", ProtobufInputStream.WIRETYPE_GROUP_START, os);\n");
						result.append("os.write(" + curField.getFullyClarifiedJavaType() + "Serializer.serialize(message.get" + curField.getBeanName() + "().get(i)));\n");
						result.append("ProtobufOutputStream.writeTag(" + curField.getTag() + ", ProtobufInputStream.WIRETYPE_GROUP_END, os);\n");
						result.append("}\n");
					} else {
						result.append("ProtobufOutputStream.writeTag(" + curField.getTag() + ", ProtobufInputStream.WIRETYPE_GROUP_START, os);\n");
						result.append("os.write(" + curField.getFullyClarifiedJavaType() + "Serializer.serialize(message.get" + curField.getBeanName() + "()));\n");
						result.append("ProtobufOutputStream.writeTag(" + curField.getTag() + ", ProtobufInputStream.WIRETYPE_GROUP_END, os);\n");
					}
				} else if (curField.isComplexType()) {
					if (curField.getNature().equals("repeated")) {
						result.append("for( int i=0;i<message.get" + curField.getBeanName() + "().size();i++) {\n");
						result.append("byte[] curMessageData = " + curField.getFullyClarifiedJavaType() + "Serializer.serialize(message.get" + curField.getBeanName() + "().get(i));\n");
						result.append("ProtobufOutputStream.writeMessageTag(" + curField.getTag() + ", os);\n");
						result.append("ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);\n");
						result.append("os.write(curMessageData);\n");
						result.append("}\n");
					} else {
						result.append("byte[] curMessageData = " + curField.getFullyClarifiedJavaType() + "Serializer.serialize(message.get" + curField.getBeanName() + "());\n");
						result.append("ProtobufOutputStream.writeMessageTag(" + curField.getTag() + ", os);\n");
						result.append("ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);\n");
						result.append("os.write(curMessageData);\n");
					}
				} else if (curField.getType().equals("bytes")) {
					result.append("ProtobufOutputStream.writeBytes(");
					result.append(curField.getTag());
					result.append(", message.get");
					result.append(curField.getBeanName());
					result.append("(), os);\n");
				} else {
					if (curField.getNature().equals("repeated")) {
						result.append("for( int i=0;i<message.get" + curField.getBeanName() + "().size();i++) {\n");
						result.append("ProtobufOutputStream.write");
						result.append(curField.getStreamBeanType());
						result.append("(");
						result.append(curField.getTag());
						result.append(", message.get");
						result.append(curField.getBeanName());
						result.append("().get(i), os);\n");
						result.append("}\n");
					} else {
						result.append("ProtobufOutputStream.write");
						result.append(curField.getStreamBeanType());
						result.append("(");
						result.append(curField.getTag());
						result.append(", message.get");
						result.append(curField.getBeanName());
						result.append("(), os);\n");
					}
				}
				result.append("}\n");
			}
			result.append("} catch (java.io.IOException e) {\n");
			result.append("throw new RuntimeException(\"Serializing to a byte array threw an IOException (should never happen).\", e);\n");
			result.append("}\n");
		}
		result.append("}\n");
	}

	private static void createParseFromBytesWithLimit(boolean interfaceBased, StringBuilder result, String fullMessageType) {
		if (interfaceBased) {
			result.append("public static " + fullMessageType + " parseFrom(MessageFactory factory, byte[] data, int offset, int length) throws java.io.IOException {\n");
		} else {
			result.append("public static " + fullMessageType + " parseFrom(byte[] data, int offset, int length) throws java.io.IOException {\n");
		}
		result.append("CurrentCursor cursor = new CurrentCursor();\n");
		result.append("cursor.addToPosition(offset);\n");
		result.append("cursor.setProcessUpToPosition(offset + length);\n");
		if (interfaceBased) {
			result.append("return parseFrom(factory, data, cursor);\n");
		} else {
			result.append("return parseFrom(data, cursor);\n");
		}
		result.append("}\n");
	}

	private static void createParseFromBytes(boolean interfaceBased, StringBuilder result, String fullMessageType) {
		if (interfaceBased) {
			result.append("public static " + fullMessageType + " parseFrom(MessageFactory factory, byte[] data) throws java.io.IOException {\n");
		} else {
			result.append("public static " + fullMessageType + " parseFrom(byte[] data) throws java.io.IOException {\n");
		}
		result.append("CurrentCursor cursor = new CurrentCursor();\n");
		if (interfaceBased) {
			result.append("return parseFrom(factory, data, cursor);\n");
		} else {
			result.append("return parseFrom(data, cursor);\n");
		}
		result.append("}\n");
	}

	private static void createParseFromBytesCursor(ProtobufMessage curMessage, boolean interfaceBased, StringBuilder result, String fullMessageType) {
		String factory = "";
		if (interfaceBased) {
			result.append("public static " + fullMessageType + " parseFrom(MessageFactory factory, byte[] data, CurrentCursor cursor) throws java.io.IOException {\n");
			result.append(fullMessageType + " message = (" + curMessage.getFullyClarifiedJavaName() + ")factory.create(\"" + curMessage.getFullyClarifiedJavaName() + "\");\n");
			result.append("if( message == null ) { \n");
			result.append("throw new java.io.IOException(\"Factory create invalid message for type: " + curMessage.getFullyClarifiedJavaName() + "\");\n");
			result.append("}\n");
			factory = "factory, ";
		} else {
			result.append("public static " + fullMessageType + " parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {\n");
			result.append(fullMessageType + " message = new " + fullMessageType + "();\n");
		}
		result.append("while(true) {\n");
		result.append("if (ProtobufInputStream.isAtEnd(data, cursor)) {\n");
		result.append("return message;\n");
		result.append("}\n");
		result.append("int varint = ProtobufInputStream.readRawVarint32(data, cursor);\n");
		result.append("int tag = ProtobufInputStream.getTagFieldNumber(varint);\n");
		if (curMessage.isGroup()) {
			result.append("int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;\n");
			result.append("if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {\n");
			result.append("return message;\n");
			result.append("}\n");
		}
		result.append("switch(tag) {\n");
		result.append("case 0: \n");
		result.append("return message;\n ");
		result.append("default: \n ProtobufInputStream.skipUnknown(varint, data, cursor);\n break;\n");
		for (ProtobufField curField : curMessage.getFields()) {
			result.append("case " + curField.getTag() + ": \n");
			if (curField.isEnumType()) {
				if (curField.getNature().equals("repeated")) {
					result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
					result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
					result.append("}\n");
					result.append("message.get" + curField.getBeanName() + "().add(" + curField.getFullyClarifiedJavaType() + ".valueOf(ProtobufInputStream.readEnum(data,cursor)));\n");
				} else {
					result.append("message.set" + curField.getBeanName() + "(" + curField.getFullyClarifiedJavaType() + ".valueOf(ProtobufInputStream.readEnum(data,cursor)));\n");
				}
			} else if (curField.isComplexType()) {
				if (curField.isGroup()) {
					if (curField.getNature().equals("repeated")) {
						result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
						result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
						result.append("}\n");
						result.append(curField.getFullyClarifiedJavaType() + " temp" + curField.getBeanName() + " = " + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "data, cursor);\n");
						result.append("message.get" + curField.getBeanName() + "().add(temp" + curField.getBeanName() + ");\n");
					} else {
						result.append(curField.getFullyClarifiedJavaType() + " temp" + curField.getBeanName() + " = " + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "data, cursor);\n");
						result.append("message.set" + curField.getBeanName() + "(temp" + curField.getBeanName() + ");\n");
					}
				} else if (curField.getNature().equals("repeated")) {
					result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
					result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
					result.append("}\n");
					result.append("int length" + curField.getBeanName() + " = ProtobufInputStream.readRawVarint32(data,cursor);\n");
					result.append("message.get" + curField.getBeanName() + "().add(" + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "data, cursor.getCurrentPosition(), length" + curField.getBeanName() + "));\n");
					result.append("cursor.addToPosition(length" + curField.getBeanName() + ");\n");
				} else {
					result.append("int length" + curField.getBeanName() + " = ProtobufInputStream.readRawVarint32(data,cursor);\n");
					result.append("message.set" + curField.getBeanName() + "(" + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "data, cursor.getCurrentPosition(), length" + curField.getBeanName() + "));\n");
					result.append("cursor.addToPosition(length" + curField.getBeanName() + ");\n");
				}
			} else if (curField.getType().equals("bytes")) {
				result.append("message.set" + curField.getBeanName() + "(ProtobufInputStream.readBytes(data,cursor));\n");
			} else {
				if (curField.getNature().equals("repeated")) {
					result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
					result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
					result.append("}\n");
					result.append("message.get" + curField.getBeanName() + "().add(ProtobufInputStream.read" + curField.getStreamBeanType() + "(data,cursor));\n");
				} else {
					result.append("message.set" + curField.getBeanName() + "(ProtobufInputStream.read" + curField.getStreamBeanType() + "(data,cursor));\n");
				}
			}
			result.append("break;\n");
		}
		result.append("}\n");
		result.append("}\n");
		result.append("}\n");
	}

	private static void createParseFromStreamWithLength(boolean interfaceBased, StringBuilder result, String fullMessageType) {
		// streamed read
		if (interfaceBased) {
			result.append("public static " + fullMessageType + " parseFrom(MessageFactory factory, java.io.InputStream is, int offset, int length) throws java.io.IOException {\n");
		} else {
			result.append("public static " + fullMessageType + " parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {\n");
		}
		result.append("CurrentCursor cursor = new CurrentCursor();\n");
		result.append("cursor.addToPosition(offset);\n");
		result.append("cursor.setProcessUpToPosition(offset + length);\n");
		if (interfaceBased) {
			result.append("return parseFrom(factory, is, cursor);\n");
		} else {
			result.append("return parseFrom(is, cursor);\n");
		}
		result.append("}\n");
	}

	private static void createParseFromStream(boolean interfaceBased, StringBuilder result, String fullMessageType) {
		// streamed read
		if (interfaceBased) {
			result.append("/** Beware! All subsequent messages in stream will be consumed until end of stream (default protobuf behaivour).\n  **/");
			result.append("public static " + fullMessageType + " parseFrom(MessageFactory factory, java.io.InputStream is) throws java.io.IOException {\n");
		} else {
			result.append("public static " + fullMessageType + " parseFrom(java.io.InputStream is) throws java.io.IOException {\n");
		}
		result.append("CurrentCursor cursor = new CurrentCursor();\n");
		if (interfaceBased) {
			result.append("return parseFrom(factory, is, cursor);\n");
		} else {
			result.append("return parseFrom(is, cursor);\n");
		}
		result.append("}\n");
	}

	private static void createParseFromStreamCursor(ProtobufMessage curMessage, boolean interfaceBased, StringBuilder result, String fullMessageType) {
		String factory = "";
		if (interfaceBased) {
			result.append("public static " + fullMessageType + " parseFrom(MessageFactory factory, java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {\n");
			result.append(fullMessageType + " message = (" + curMessage.getFullyClarifiedJavaName() + ")factory.create(\"" + curMessage.getFullyClarifiedJavaName() + "\");\n");
			result.append("if( message == null ) { \n");
			result.append("throw new java.io.IOException(\"Factory create invalid message for type: " + curMessage.getFullyClarifiedJavaName() + "\");\n");
			result.append("}\n");
			factory = "factory, ";
		} else {
			result.append("public static " + fullMessageType + " parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {\n");
			result.append(fullMessageType + " message = new " + fullMessageType + "();\n");
		}
		result.append("while(true) {\n");
		result.append("if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {\n");
		result.append("return message;\n");
		result.append("}\n");
		result.append("int varint = ProtobufInputStream.readRawVarint32(is, cursor);\n");
		result.append("int tag = ProtobufInputStream.getTagFieldNumber(varint);\n");
		result.append("if (ProtobufInputStream.isAtEnd(cursor)) {\n");
		result.append("return message;\n");
		result.append("}\n");
		if (curMessage.isGroup()) {
			result.append("int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;\n");
			result.append("if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {\n");
			result.append("return message;\n");
			result.append("}\n");
		}
		result.append("switch(tag) {\n");
		result.append("case 0: \n");
		result.append("return message;\n ");
		result.append("default: \n ProtobufInputStream.skipUnknown(varint, is, cursor);\n break;");
		for (ProtobufField curField : curMessage.getFields()) {
			result.append("case " + curField.getTag() + ": \n");
			if (curField.isEnumType()) {
				if (curField.getNature().equals("repeated")) {
					result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
					result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
					result.append("}\n");
					result.append("message.get" + curField.getBeanName() + "().add(" + curField.getFullyClarifiedJavaType() + ".valueOf(ProtobufInputStream.readEnum(is,cursor)));\n");
				} else {
					result.append("message.set" + curField.getBeanName() + "(" + curField.getFullyClarifiedJavaType() + ".valueOf(ProtobufInputStream.readEnum(is,cursor)));\n");
				}
			} else if (curField.isGroup()) {
				if (curField.getNature().equals("repeated")) {
					result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
					result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
					result.append("}\n");
					result.append(curField.getFullyClarifiedJavaType() + " temp" + curField.getBeanName() + " = " + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "is, cursor);\n");
					result.append("message.get" + curField.getBeanName() + "().add(temp" + curField.getBeanName() + ");\n");
				} else {
					result.append(curField.getFullyClarifiedJavaType() + " temp" + curField.getBeanName() + " = " + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "is, cursor);\n");
					result.append("message.set" + curField.getBeanName() + "(temp" + curField.getBeanName() + ");\n");
				}
			} else if (curField.isComplexType()) {
				if (curField.getNature().equals("repeated")) {
					result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
					result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
					result.append("}\n");
					result.append("int length" + curField.getBeanName() + " = ProtobufInputStream.readRawVarint32(is,cursor);\n");
					result.append("message.get" + curField.getBeanName() + "().add(" + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "is, cursor.getCurrentPosition(), length" + curField.getBeanName() + "));\n");
				} else {
					result.append("int length" + curField.getBeanName() + " = ProtobufInputStream.readRawVarint32(is,cursor);\n");
					result.append("message.set" + curField.getBeanName() + "(" + curField.getFullyClarifiedJavaType() + "Serializer.parseFrom(" + factory + "is, cursor.getCurrentPosition(), length" + curField.getBeanName() + "));\n");
				}
				result.append("cursor.addToPosition(length" + curField.getBeanName() + ");\n");
			} else if (curField.getType().equals("bytes")) {
				result.append("message.set" + curField.getBeanName() + "(ProtobufInputStream.readBytes(is,cursor));\n");
			} else {
				if (curField.getNature().equals("repeated")) {
					result.append("if( message.get" + curField.getBeanName() + "() == null || message.get" + curField.getBeanName() + "().isEmpty()) {\n");
					result.append("message.set" + curField.getBeanName() + "(new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">());\n");
					result.append("}\n");
					result.append("message.get" + curField.getBeanName() + "().add(ProtobufInputStream.read" + curField.getStreamBeanType() + "(is,cursor));\n");
				} else {
					result.append("message.set" + curField.getBeanName() + "(ProtobufInputStream.read" + curField.getStreamBeanType() + "(is,cursor));\n");
				}
			}
			result.append("break;\n");
		}
		result.append("}\n");
		result.append("}\n");
		result.append("}\n");
	}

	private static void generateDefaultMessageImpl(ProtobufMessage curMessage, File output, String packageName) throws Exception {
		StringBuilder result = new StringBuilder();
		result.append("public class " + curMessage.getName() + "Impl implements " + curMessage.getFullyClarifiedJavaName() + " {\n");
		for (ProtobufField curField : curMessage.getFields()) {
			String javaType = constructType(curField);
			result.append("private " + javaType + " " + curField.getBeanName() + ";\n");
			result.append("private boolean has" + curField.getBeanName() + ";\n");
			result.append("public boolean has" + curField.getBeanName() + "() {\n");
			result.append("return has" + curField.getBeanName() + ";\n");
			result.append("}\n");
			result.append("public " + javaType + " get" + curField.getBeanName() + "() {\n");
			result.append("return " + curField.getBeanName() + ";\n");
			result.append("}\n");
			result.append("public void set" + curField.getBeanName() + "(" + javaType + " " + curField.getBeanName() + ") {\n");
			result.append("this." + curField.getBeanName() + " = " + curField.getBeanName() + ";\n");
			result.append("this.has" + curField.getBeanName() + " = true;\n");
			result.append("}\n");
		}
		result.append("}\n");

		File outputFile = new File(output, curMessage.getName() + "Impl.java");
		BufferedWriter messageWriter = new BufferedWriter(new FileWriter(outputFile));
		appendPackage(messageWriter, packageName);
		messageWriter.append(result.toString());
		messageWriter.flush();
		messageWriter.close();

		if (curMessage.getNestedMessages() != null) {
			for (ProtobufMessage message : curMessage.getNestedMessages()) {
				generateDefaultMessageImpl(message, output, packageName);
			}
		}

	}
//---增加Tomap的机制
	private static String generateMessage(ProtobufMessage curMessage, String outerClassName, GeneratorConfiguration config) {
		String chainingReturn = "void";
		if (config.isGenerateChaining()) {
			chainingReturn = curMessage.getName();
		}

		StringBuilder result = new StringBuilder();
		if (config.isInterfaceBased()) {
			result.append("public interface ");
			result.append(curMessage.getName());
			result.append(" {\n");
			for (ProtobufField curField : curMessage.getFields()) {
				if (curField.isDeprecated()) {
					result.append("@Deprecated\n");
				}
				result.append("boolean has");
				result.append(curField.getBeanName());
				result.append("();\n");
				String javaType = constructType(curField);
				if (curField.isDeprecated()) {
					result.append("@Deprecated\n");
				}
				result.append(javaType);
				result.append(" get");
				result.append(curField.getBeanName());
				result.append("();\n");
				if (curField.isDeprecated()) {
					result.append("@Deprecated\n");
				}
				result.append(chainingReturn + " set");
				result.append(curField.getBeanName());
				result.append("(");
				result.append(javaType);
				result.append(" ");
				result.append(curField.getName());
				result.append(");\n");
				if (config.isGenerateListHelpers() && curField.isListType()) {
					result.append(curField.getFullyClarifiedJavaType() + " get" + curField.getBeanName() + "(int index);\n");
					result.append("int get" + curField.getBeanName() + "Count();\n");
					result.append(chainingReturn + " set" + curField.getBeanName() + "(int index, " + curField.getFullyClarifiedJavaType() + " value);\n");

					result.append(chainingReturn + " add" + curField.getBeanName() + "(" + curField.getFullyClarifiedJavaType() + " value);\n");
					result.append(chainingReturn + " addAll" + curField.getBeanName() + "(java.lang.Iterable<? extends " + curField.getFullyClarifiedJavaType() + "> values);\n");
					result.append(chainingReturn + " clear" + curField.getBeanName() + "();\n");
				}
			}
		} else {
			String staticKeyword = "";
			if (outerClassName != null) {
				staticKeyword = "static";
			}
			result.append("public " + staticKeyword + " class " + curMessage.getName());
			if (config.getMessageExtendsClass() != null) {
				result.append(" extends " + config.getMessageExtendsClass());
			}
			result.append(" {\n");
			for (ProtobufField curField : curMessage.getFields()) {
				String javaType = constructType(curField);
				result.append("private " + javaType + " " + curField.getJavaFieldName() + ";\n");
				if (config.isGenerateStaticFields()) {
					result.append("public static final int " + curField.getName().toUpperCase(Locale.UK) + "_FIELD_NUMBER = " + curField.getTag() + ";\n");
				}
				result.append("private boolean has" + curField.getBeanName() + ";\n");
				result.append("public boolean has" + curField.getBeanName() + "() {\n");
				result.append("return has" + curField.getBeanName() + ";\n");
				result.append("}\n");
				result.append("public " + javaType + " get" + curField.getBeanName() + "() {\n");
				result.append("return " + curField.getJavaFieldName() + ";\n");
				result.append("}\n");
				result.append("public " + chainingReturn + " set" + curField.getBeanName() + "(" + javaType + " " + curField.getBeanName() + ") {\n");
				result.append("this." + curField.getJavaFieldName() + " = " + curField.getBeanName() + ";\n");
				result.append("this.has" + curField.getBeanName() + " = true;\n");
				if (config.isGenerateChaining()) {
					result.append("return this;\n");
				}
				result.append("}\n");
				if (config.isGenerateListHelpers() && curField.isListType()) {
					result.append("public " + curField.getFullyClarifiedJavaType() + " get" + curField.getBeanName() + "(int index) {\n");
					result.append("return this." + curField.getJavaFieldName() + ".get(index);\n");
					result.append("}\n");

					result.append("public int get" + curField.getBeanName() + "Count() {\n");
					result.append("return this." + curField.getJavaFieldName() + ".size();\n");
					result.append("}\n");

					result.append("public " + chainingReturn + " set" + curField.getBeanName() + "(int index, " + curField.getFullyClarifiedJavaType() + " value) {\n");
					result.append("this." + curField.getJavaFieldName() + ".set(index, value);\n");
					if (config.isGenerateChaining()) {
						result.append("return this;\n");
					}
					result.append("}\n");

					result.append("public " + chainingReturn + " add" + curField.getBeanName() + "(" + curField.getFullyClarifiedJavaType() + " value) {\n");
					initRepeatedFieldIfEmpty(result, curField);
					result.append("this." + curField.getJavaFieldName() + ".add(value);\n");
					if (config.isGenerateChaining()) {
						result.append("return this;\n");
					}
					result.append("}\n");

					result.append("public " + chainingReturn + " addAll" + curField.getBeanName() + "(java.lang.Iterable<? extends " + curField.getFullyClarifiedJavaType() + "> values) {\n");
					initRepeatedFieldIfEmpty(result, curField);
					result.append("if (values instanceof java.util.Collection) {\n");
					result.append("@SuppressWarnings(\"unsafe\") final\n");
					result.append("java.util.Collection<? extends " + curField.getFullyClarifiedJavaType() + "> collection = (java.util.Collection<? extends " + curField.getFullyClarifiedJavaType() + ">) values;\n");
					result.append("this." + curField.getJavaFieldName() + ".addAll(collection);\n");
					result.append("} else {\n");
					result.append("for (final " + curField.getFullyClarifiedJavaType() + " value : values) {\n");
					result.append("this." + curField.getJavaFieldName() + ".add(value);\n");
					result.append("}\n}\n");
					if (config.isGenerateChaining()) {
						result.append("return this;\n");
					}
					result.append("}\n");

					result.append("public " + chainingReturn + " clear" + curField.getBeanName() + "() {\n");
					result.append("this.has" + curField.getBeanName() + " = false;\n");
					result.append("this." + curField.getJavaFieldName() + " = null;\n");
					if (config.isGenerateChaining()) {
						result.append("return this;\n");
					}
					result.append("}\n");
				}
			}
			//--------------toMap()-------------------
			result.append("public java.util.Map toMap() {\n");
			result.append("java.util.Map map=new java.util.HashMap();\n");
			for (ProtobufField curField : curMessage.getFields()) {
				if(!curField.isListType()){
						if(curField.isComplexType()){
							result.append("if(").append(curField.getJavaFieldName()).append("!=null){\n");
							result.append("map.put(").append("\"").append(curField.getJavaFieldName()).append("\",").append(curField.getJavaFieldName()).append(".toMap());\n");
							result.append("}\n");
						}else
						result.append("map.put(").append("\"").append(curField.getJavaFieldName()).append("\",").append(curField.getJavaFieldName()).append(");\n");				
				}else{
					result.append("if(").append(curField.getJavaFieldName()).append("!=null){\n");
					String toMapFix="";
					if(curField.isComplexType()){
						toMapFix=".toMap()";
						result.append("java.util.List<java.util.Map> m_").append(curField.getJavaFieldName()).append("=new java.util.ArrayList<java.util.Map>();\n");
					}else
						result.append("java.util.List<"+curField.getFullyClarifiedJavaType()+"> m_").append(curField.getJavaFieldName()).append("=new java.util.ArrayList<"+curField.getFullyClarifiedJavaType()+">();\n");
					
					
					result.append("if (").append(curField.getJavaFieldName()).append(" instanceof java.util.Collection) {\n");
					//result.append("java.util.Collection<? extends " + curField.getFullyClarifiedJavaType() + "> collection = (java.util.Collection<? extends " + curField.getFullyClarifiedJavaType() + ">) values;\n");
					result.append("java.util.Iterator<").append( curField.getFullyClarifiedJavaType()).append(">").append(" it;\n");
					result.append("it=").append(curField.getJavaFieldName()).append(".iterator();\n");
				
					
					result.append("while(it.hasNext()){\n");
								result.append("m_").append(curField.getJavaFieldName()).append(".add(").append("it.next()").append(toMapFix).append(");\n");
					result.append("}\n");
					//result.append("map.put(").append("\"").append(curField.getJavaFieldName()).append("\",m_").append(curField.getJavaFieldName()).append(");\n");				
					result.append("} else {\n");
					result.append("for (final " + curField.getFullyClarifiedJavaType() + " value : "+curField.getJavaFieldName()+") {\n");
					result.append("m_").append(curField.getJavaFieldName()).append(".add(").append("value").append(toMapFix).append(");\n");
					result.append("}\n}\n");
					result.append("map.put(").append("\"").append(curField.getJavaFieldName()).append("\",m_").append(curField.getJavaFieldName()).append("").append(");\n");				
					result.append("}\n");
				}
				
			}
			result.append("return map;\n");
			result.append("}\n");
			
			//--------------toMap()-------------------
			if (config.isGenerateToString()) {
				result.append("@Override\n");
				result.append("public String toString() {\n");
				result.append("java.lang.StringBuilder builder = new java.lang.StringBuilder();\n");
				result.append("try {\n");
				result.append("toString(builder);\n");
				result.append("return builder.toString();\n");
				result.append("} catch (java.io.IOException e) {\n");
				result.append("throw new RuntimeException(\"Unable toString\", e);\n");
				result.append("}\n");
				result.append("}\n");
				result.append("public void toString(java.lang.Appendable a_) throws java.io.IOException {\n");
				result.append("a_.append(\"" + curMessage.getName() + " [\");\n");
				for (int i = 0; i < curMessage.getFields().size(); i++) {
					ProtobufField curField = curMessage.getFields().get(i);
					if (i != 0) {
						result.append("a_.append(\",\");\n");
					}
					if (curField.isComplexType()) {
						if (curField.isListType()) {
							result.append("a_.append(\" " + curField.getJavaFieldName() + "=\");\n");
							result.append("if (" + curField.getJavaFieldName() + " != null ) {\n");
							result.append("a_.append(\"[\");\n");
							result.append("for( int i=0;i<" + curField.getJavaFieldName() + ".size();i++ ) {\n");
							result.append(curField.getFullyClarifiedJavaType() + " cur = " + curField.getJavaFieldName() + ".get(i);\n");
							result.append("if( i != 0 ) {\n ");
							result.append("a_.append(\", \");\n");
							result.append("}\n");
							if( curField.isEnumType() ) {
								result.append("a_.append(cur.toString());\n");
							} else {
								result.append("cur.toString(a_);\n");
							}
							result.append("}\n");
							result.append("a_.append(\"]\");\n");
							result.append("} else {\n");
							result.append("a_.append(\"null\");\n");
							result.append("}\n");
						} else if (curField.isEnumType()) {
							result.append("a_.append(\" " + curField.getJavaFieldName() + "=\");\n");
							result.append("if ( " + curField.getJavaFieldName() + " != null ) {\n");
							result.append("a_.append(" + curField.getJavaFieldName() + ".toString());\n");
							result.append("} else {\n");
							result.append("a_.append(\"null\");\n");
							result.append("}\n");
						} else {
							result.append("a_.append(\" " + curField.getJavaFieldName() + "=\");\n");
							result.append("if ( " + curField.getJavaFieldName() + " != null ) {\n");
							result.append(curField.getJavaFieldName() + ".toString(a_);\n");
							result.append("} else {\n");
							result.append("a_.append(\"null\");\n");
							result.append("}\n");
						}
					} else {
						result.append("a_.append(\" " + curField.getJavaFieldName() + "=\" + " + curField.getJavaFieldName() + ");\n");
					}
				}
				result.append("a_.append(\"]\");\n");
				result.append("}\n");
			}
		}

		for (ProtobufMessage innerMessage : curMessage.getNestedMessages()) {
			result.append(generateMessage(innerMessage, outerClassName, config));
			String serializerData = generateSerializer(innerMessage, outerClassName, config);
			result.append(serializerData);
		}
		for (ProtobufEnum curEnum : curMessage.getEnums()) {
			result.append(generateEnum(curEnum));
		}
		result.append("}\n");
		return result.toString();
	}

	private static void initRepeatedFieldIfEmpty(StringBuilder result, ProtobufField curField) {
		result.append("if( this." + curField.getJavaFieldName() + " == null ) {\n");
		result.append("this." + curField.getJavaFieldName() + " = new java.util.ArrayList<" + curField.getFullyClarifiedJavaType() + ">();\n");
		result.append("this.has" + curField.getBeanName() + " = true;\n");
		result.append("}\n");
	}

	private static String generateEnum(ProtobufEnum pEnum) {
		StringBuilder result = new StringBuilder();
		result.append("public enum ");
		result.append(pEnum.getName());
		result.append(" {\n");
		Map<Long, EnumValue> added = new HashMap<Long, EnumValue>();
		List<EnumValue> duplicate = new ArrayList<EnumValue>();
		for (EnumValue curValue : pEnum.getValues()) {
			if (added.containsKey(curValue.getId())) {
				duplicate.add(curValue);
				continue;
			}
			result.append(curValue.getName());
			result.append("(");
			result.append(curValue.getId());
			result.append("),\n");
			added.put(curValue.getId(), curValue);
		}

		for (EnumValue curDuplicate : duplicate) {
			result.append(";\npublic static final ");
			result.append(pEnum.getName());
			result.append(" ");
			result.append(curDuplicate.getName());
			result.append(" = ");
			result.append(added.get(curDuplicate.getId()).getName());
		}

		result.append(";\npublic static ");
		result.append(pEnum.getName());
		result.append(" valueOf(int value) {\nswitch (value) {\n");
		for (EnumValue curValue : pEnum.getValues()) {
			if (duplicate.contains(curValue)) {
				continue;
			}
			result.append("case ");
			result.append(curValue.getId());
			result.append(": return ");
			result.append(curValue.getName());
			result.append(";\n");
		}
		result.append("default: return null;\n}\n}\nprivate ");
		result.append(pEnum.getName());
		result.append("(int value) {\nthis.value = value;\n}\nprivate int value;\npublic int getValue() {\nreturn value;\n}\n}\n\n");
		return result.toString();
	}

	private static void appendPackage(BufferedWriter w, String packageName) throws Exception {
		if (packageName != null) {
			w.append("package ");
			w.append(packageName);
			w.append(";\n\n");
		}
	}

	private static String constructType(ProtobufField curField) {
		StringBuilder result = new StringBuilder();
		String javaType = curField.getFullyClarifiedJavaType();
		if (curField.isListType()) {
			result.append("java.util.List<");
		}
		result.append(javaType);
		if (curField.isListType()) {
			result.append(">");
		}
		return result.toString();
	}

	private static File createPackage(File parent, String packageName) {
		String[] paths = packageName.split("\\.");
		File curDirectory = parent;
		for (String curPath : paths) {
			File curDirPath = new File(curDirectory, curPath);
			if (!curDirPath.exists() || !curDirPath.isDirectory()) {
				curDirPath.mkdir();
			}
			curDirectory = curDirPath;
		}
		return curDirectory;
	}

	private static boolean hasRequired(ProtobufMessage message) {
		for (ProtobufField curField : message.getFields()) {
			if (curField.getNature().equals("required")) {
				return true;
			}
		}
		return false;
	}

}
